/**
 * modelFmSheet.ajs
 *
 * Reads an Excel sheet of ArchiMate elements and creates or updates corresponding
 * model elements in the active Archi model using reusable library functions.
 * Then writes the enriched data (with model element IDs) back to an Excel file.
 *
 * For each record, this script:
 *  1. Loads the Excel file into an object via excelUtils.loadExcelData
 *  2. Extracts `name`, `type`, and `documentation` per CONFIG.fieldMap
 *  3. Calls modelUtils.createOrRetrieveConcept({ name, type, documentation, action })
 *     to create, skip, duplicate, or update the element in the model
 *  4. Updates the in-memory data object with `model_id` = returned element ID
 *  5. Saves the enhanced data back to an Excel file via excelUtils.saveDataToExcel
 *
 * Includes diagnostics, validation of required headers, and logging at each step.
 *
 * Usage (GUI):
 *   1. Place this script at the project root.
 *   2. Run via Archi's script runner: `--script.runScript modelFmSheet.ajs`
 *
 * Configuration:
 *   Modify the CONFIG constant below to set file paths, sheet names, headers,
 *   conceptAction ('skip' | 'duplicate' | 'update'), and outputFile path.
 */

// Refresh the Archi console
console.clear();
console.show();
// -- Library imports
var { 
    ensureModelLoaded, 
    createOrRetrieveConcept,  
    applyPropertiesToModel,     
    createViewsFromData,
    applySpecializationToElement,
    importSpecializationsFromData,
    applyGroupingRelationships
    } = require(__DIR__ + '/lib/modelUtils.ajs');
var { 
  loadExcelData, 
  filterDataNyConfigMap,
  saveDataToExcel  
  } = require(__DIR__ +'/lib/excelUtils.ajs');
var { lookupAndExtend } = require(__DIR__ + '/lib/commonUtils.ajs');
const log     = require(__DIR__ + "/lib/logger.ajs").log;

// -- Script configuration: adjust these as needed
var CONFIG = {
  createElements: true,
  createRels: true,  
  createViews: true,
  File:{
    cacheDataType: 'array',  // Output format from loadExcelData: 'object' or 'array'  
    input: {
      concepts: {
        excelFilePath: "C:\\myWorkspace\\WS_Archi\\MSA-RA\\MSA-RA-newModel-output-wip-full.xlsx", // Absolute path to your Excel file; if invalid or null, you will be prompted  
        sheetName: "ModelElements",  // Sheet name to process; defaults to the first sheet if not provided  
        keyHeader: 'uid', // Column whose values act as keys for object output (must be in headers)  
        requiredColumns: ['Name', 'Type', 'Description'], // List of required headers// List of headers that must exist in the sheet
      },
      relationships: {
        excelFilePath: "C:\\myWorkspace\\WS_Archi\\MSA-RA\\MSA-RA-newModel-output.xlsx", // Absolute path to your Excel file; if invalid or null, you will be prompted  
        sheetName: "ModelElements",  // Sheet name to process; defaults to the first sheet if not provided     
        keyHeader: 'uid', // Column whose values act as keys for object output (must be in headers)   
        requiredColumns: ["Grouped_under","Grouping_relationshipType","model_id","relTargetId"], // List of required headers// List of headers that must exist in the sheet
      }
    },
    output:{
      Path : "C:\\myWorkspace\\WS_Archi\\MSA-RA\\MSA-RA-newModel-output.xlsx", // Path to write the enriched output Excel file; if invalid or null, you will be prompted
      SheetName: 'ModelElements', // Name for the output sheet
      Headers: [
        "uid",
        "_id",
        "Name",
        "Description",
        "Pri Domain",
        "Taxonomy Classification",
        "Level",
        "modelOnly",
        "Type",
        "Grouped_under",
        "Grouping_relationshipType",
        "inView",
        "Version",
        "Owner",
        "StandardSolutionExample",
        "ExampleUse",
        "model_id",
        "relTargetId"
      ]
    },
  },
  fieldMap: {
    name: 'Name',
    type: 'Type',
    documentation: 'Description'
  },  // Map record fields to sheet headers
  
  conceptAction: 'update',    // Action on existing concepts: 'skip' | 'duplicate' | 'update'
  
  propertiesList: [
    "uid",
    "_id",
    "Pri Domain",
    "Taxonomy Classification",
    "Level",
    "modelOnly",
    "Type",
    "Grouped_under",
    "Grouping_relationshipType",
    "inView",
    "Version",
    "Owner",
    "StandardSolutionExample",
    "ExampleUse"
  ],
  specialization : {
    Field: "Pri Domain",
    Type: "Type"
    },
  viewsColumn: "Pri Domain",
  grouping : {
    Field: "Grouped_under", // column name
    Relationship: {      
      Type: "Grouping_relationshipType", // column name
      default: "AssociationRelationship", // string
      sourceElemtn: "model_id",  // column name for the souce element ids
      targetElement: "relTargetId"  // column name for the target element ids
    } 
  },
  rels_xLookup: {
    lookupField:  "Grouped_under",
    matchField:   "Name",
    returnField:  "model_id",
    outputField:  "relTargetId",
    defaultValue: ""
  },
  filterMap: {
    "ColumnHeader1": {
      "Foo*": "IN",
      "?Bar": "OUT",
      "Baz": "IN"
    },
    "ColumnHeader2": {
      "202?-##": "OUT"
    }
  }

};

/**
 * Process one record: create/update a concept and attach its ID
 * @param {Object} rec – One row-record from Excel
 */
function processRecord(rec) {
  var name = rec[CONFIG.fieldMap.name];
  var type = rec[CONFIG.fieldMap.type];
  var doc  = rec[CONFIG.fieldMap.documentation];

  log.debug('Processing record → Name: ' + name + ', Type: ' + type);

  if (!name || !type) {
    log.warn('Skipping record due to missing name or type');
    return;
  }

  try {
    var id = createOrRetrieveConcept({
      name:          name,
      type:          type,
      documentation: doc,
      action:        CONFIG.conceptAction
    });
    log.info('Concept created/updated: [' + type + '] ' + name + ' → id=' + id);
    rec.model_id = id;
  }
  catch (e) {
    log.error('Error creating/updating concept for ' + name + ' – ' + e);
  }
}

/**
 * Main entry point for modelFmSheet.ajs
 *
 * 1. Loads Excel data (object or array) per CONFIG.outputType
 * 2. Ensures an Archi model is loaded
 * 3. Creates or updates ArchiMate concepts
 * 4. Applies custom properties
 * 5. Ensures + applies specializations
 * 6. Generates views by domain
 * 7. Saves the enriched mapping back to Excel
 */
function main() {

  let data;
  try {
    log.info("▶ modelFmSheet starting…");

    if (CONFIG.createElements) {
    
        // STEP 1: Load Excel data in the chosen format
        data = loadExcelData({
          filePath:        CONFIG.File.input.concepts.excelFilePath,
          sheetName:       CONFIG.File.input.concepts.sheetName,
          keyHeader:       CONFIG.File.input.concepts.keyHeader,
          outputType:      CONFIG.File.cacheDataType,
          requiredHeaders: CONFIG.File.input.concepts.requiredColumns
        });
        // Report row/record count
        if (CONFIG.File.cacheDataType === "array") {
          log.info(`Loaded ${data.length} rows from Excel`);
        }
        else {
          log.info(`Loaded ${Object.keys(data).length} records from Excel`);
        }

        // Helper to iterate uniformly over data
        const iterate = CONFIG.File.cacheDataType === "array"
          ? fn => data.forEach(fn)
          : fn => Object.values(data).forEach(fn);

        // STEP 2: Ensure a model is active
        const model = ensureModelLoaded();
        log.debug(`Model loaded: ${model.name || model.id}`);

        // STEP 3: Create or update each concept, store its ID
        log.info("Processing concepts (create/update)...");
        iterate((rec, idx) => {
          const rowLabel = CONFIG.File.cacheDataType === "array" ? `row ${idx+1}` : `key "${idx}"`;
          
          // Pull actual values from this record using your fieldMap
          const nameKey = CONFIG.fieldMap.name;
          const typeKey = CONFIG.fieldMap.type;
          const docKey  = CONFIG.fieldMap.documentation;

          const name          = rec[nameKey];
          const type          = rec[typeKey];
          const documentation = rec[docKey];

          // Validate before calling the API
          if (!name || !type) {
            log.warn(`row ${idx+1}: missing "${nameKey}" or "${typeKey}", skipping`);
            return;
          }

          try {
            const id = createOrRetrieveConcept({
              name,
              type,
              documentation,
              action: CONFIG.conceptAction
            });
            rec.model_id = id;
            log.debug(`[${type}] "${name}" → ID=${id}`);
          }
          catch (err) {
            log.error(`row ${idx+1}: failed to create/update "${name}": ${err.message||err}`);
            throw err;
          }
        });

        // STEP 4: Apply custom properties in bulk
        log.info("Applying element properties...");
        applyPropertiesToModel(data, CONFIG.propertiesList);

        // After loading `data` and before `applySpecializationToElement` steps:
        importSpecializationsFromData(data, CONFIG.specialization.Type, CONFIG.specialization.Field);

        // STEP 5: Ensure & apply specializations per element
        log.info("Applying specializations...");
        iterate(rec => {
          const spec = rec[CONFIG.specializationField];
          if (!rec.model_id || !spec) return;

          // jArchi lookup by ID via jQuery selector
          const elem = $(`#${rec.model_id}`).first();
          if (!elem) {
            log.warn(`Element ID=${rec.model_id} not found, skipping specialization`);
            return;
          }
          applySpecializationToElement(elem, spec);
        });

        // STEP 6a: Lookup and extend - identify the relTargetId for each record relationship
        log.info(`Lookup and extend...`);
        data = lookupAndExtend(
          data,
          CONFIG.rels_xLookup.lookupField,
          CONFIG.rels_xLookup.matchField,
          CONFIG.rels_xLookup.returnField,
          CONFIG.rels_xLookup.outputField,
          { defaultValue: CONFIG.rels_xLookup.defaultValue }
        );

        // STEP 7: Write the enriched data (with relTargetId) back to Excel
        log.info("Saving mapping back to Excel...");
        saveDataToExcel({
          data:       data,
          outputFile: CONFIG.File.output.Path,
          sheetName:  CONFIG.File.output.SheetName,  // omit or undefined to use default
          headers:    CONFIG.File.output.Headers
        });
      }

      if (CONFIG.createRels) {
        window.alert(
                "prepare the relationships sheet before proceeding!\n"  );
        
        // STEP Z: Load and validate relationship definitions from Excel
        let relData;
        try {
          log.info("Loading relationship definitions from Excel…");
          relData = loadExcelData({
            filePath:        CONFIG.File.input.relationships.excelFilePath,
            sheetName:       CONFIG.File.input.relationships.sheetName,
            keyHeader:       CONFIG.File.input.relationships.keyHeader,
            outputType:      CONFIG.File.cacheDataType,
            requiredHeaders: CONFIG.File.input.relationships.requiredColumns
          });
          // Report row/record count
          if (CONFIG.File.cacheDataType === "array") {
            log.info(`Loaded ${relData.length} rows of relationship records from Excel`);
          }
          else {
            log.info(`Loaded ${Object.keys(relData).length} relationship records from Excel`);
          }
        }
        catch (e) {
          log.error(`Failed to load relationship definitions: ${e.message || e}`);
          throw e;
        }

        
        // STEP Y: Create grouping relationships based on loaded data
        try {
          log.info("Applying grouping relationships…");
          applyGroupingRelationships(relData, CONFIG.grouping);
          log.info("Grouping relationships applied successfully");
        }      
        catch (e) {
          log.error(`Error while applying grouping relationships: ${e.message || e}`);
          throw e;
        }
      }

      // STEP X: Create and populate views from domain column
      if (CONFIG.createViews) {
        try {         
          log.info(`Creating views from "${CONFIG.viewsColumn}"...`);
          createViewsFromData(data, CONFIG.viewsColumn);
        }      
        catch (e) {
          log.error(`Error wwhile creating views from pri domains: ${e.message || e}`);
          throw e;
        }
      }
    
    log.info("modelFmSheet completed successfully");
  }
  catch (err) {
    log.error(`modelFmSheet: Fatal error – ${err.message || err}`);
    throw err;
  }
}

main();
