// logger.ajs
/**
 * Common logging utility for jArchi scripts.
 * Usage:
 *   var env = require('loadEnv');
 *   env.loadEnv();
 *   var logModule = require('logger');
 *   logModule.log('Hello');
 *   logModule.debug('Debugging info');
 */

var System = Java.type('java.lang.System');

// Initialize DEBUG flag from environment
var CONFIG = {
    debug: (System.getenv('DEBUG') || 'false').toLowerCase() === 'true'
};

/**
 * Unified logging function.
 * Emits coloured, timestamped output.
 * If `details` is given, logs structured JSON.
 * DEBUG-level messages are no-ops unless CONFIG.debug is true.
 *
 * @param {"DEBUG"|"INFO"|"WARN"|"ERROR"} level
 * @param {string} msgOrEvent
 * @param {object} [details]
 */
function loggerUtility(level, msgOrEvent, details) {
    if (level === 'DEBUG' && !CONFIG.debug) {
        return;
    }
    var timestamp = new Date().toISOString();
    var rgb;
    switch (level) {
        case 'DEBUG': rgb = [0, 0, 255];      break;
        case 'WARN':  rgb = [255, 165, 0];    break;
        case 'ERROR': rgb = [255, 0, 0];      break;
        case 'INFO':
        default:      rgb = [0, 0, 0];        break;
    }
    console.setTextColor(rgb[0], rgb[1], rgb[2]);
    if (typeof details !== 'undefined') {
        console.log(JSON.stringify({
            timestamp: timestamp,
            event:     msgOrEvent,
            details:   details,
            level:     level
        }));
    }
    else {
        console.log('[' + level + '] ' + timestamp + ' ' + msgOrEvent);
    }
    console.setTextColor(0, 0, 0);
}

// Shorthand methods
function log(msg)   { loggerUtility('INFO',  msg); }
function warn(msg)  { loggerUtility('WARN',  msg); }
function error(msg) { loggerUtility('ERROR', msg); }
function debug(msg) { loggerUtility('DEBUG', msg); }

module.exports = {  
    log,
    warn,
    error,
    debug
};
