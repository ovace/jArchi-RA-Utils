// logger.ajs
/**
 * Log a message with a level, ISO-timestamp, and coloured font.
 * Uses console.setTextColor before each console.log.
 *
 * @param {"DEBUG"|"INFO"|"WARN"|"ERROR"} level
 * @param {string} msg
 */


function logStructured(event, details, level) {
    var entry = {
        timestamp: new Date().toISOString(),
        event: event,
        details: details,
        level: level || "INFO"
    };
    // Choose RGB per level
  let rgb;
  switch(level) {
    case "DEBUG": rgb = [0, 0, 255];       break; // blue
    case "WARN":  rgb = [255, 165, 0];     break; // orange
    case "ERROR": rgb = [255, 0, 0];       break; // red
    case "INFO":
    default:      rgb = [0, 0, 0];         break; // black
  }

  // Set console text colour
  console.setTextColor(rgb[0], rgb[1], rgb[2]);      // :contentReference[oaicite:0]{index=0}
  //   console.log(`[${level}] ${ts} ${msg}`);
  console.log(JSON.stringify(entry));
  
  // (Optionally) reset back to black for any plain console.log calls
  console.setTextColor(0, 0, 0);                     // :contentReference[oaicite:1]{index=1}
   
}

/**
 * Log a message with a level, ISO-timestamp, and coloured font.
 * Uses console.setTextColor before each console.log.
 *
 * @param {"DEBUG"|"INFO"|"WARN"|"ERROR"} level
 * @param {string} msg
 */
function logWithLevel(level, msg) {
  const ts = new Date().toISOString();
  // Choose RGB per level
  let rgb;
  switch(level) {
    case "DEBUG": rgb = [0, 0, 255];       break; // blue
    case "WARN":  rgb = [255, 165, 0];     break; // orange
    case "ERROR": rgb = [255, 0, 0];       break; // red
    case "INFO":
    default:      rgb = [0, 0, 0];         break; // black
  }

  // Set console text colour
  console.setTextColor(rgb[0], rgb[1], rgb[2]);      // :contentReference[oaicite:0]{index=0}
  console.log(`[${level}] ${ts} ${msg}`);
  
  // (Optionally) reset back to black for any plain console.log calls
  console.setTextColor(0, 0, 0);                     // :contentReference[oaicite:1]{index=1}
}

/**
 * Shortcut for debug-level messages.
 * These all call logWithLevel, which itself does NOT call debug().
 *
 * @param {string} msg
 */
const log   = msg => logWithLevel("INFO", msg);
const error = msg => logWithLevel("ERROR", msg);
const debug = msg => logWithLevel("DEBUG", msg);
const warn  = msg => logWithLevel("WARN",  msg);

module.exports = { 
                    logWithLevel, 
                    log, 
                    error, 
                    debug, 
                    warn, 
                    logStructured 
                  };