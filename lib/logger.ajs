/**
 * logger.ajs – structured leveled logger for jArchi
 * Global symbol:  log
 * load("logger.ajs")        -> { log }
 * require("logger.ajs")     -> { log }
 */

var loggerExport = (function (global) {
    'use strict';

    // /* ---------- ensure loadEnv present ---------- */
    // try { if (typeof global.loadEnv !== 'function')
    //          load(__DIR__ + 'loadEnv.ajs');            // will set global.loadEnv
    // } catch (e) { console.error(String("logger: loadEnv missing – " + e)); }

    // var ENV = {};
    // try {
    //     if (typeof global.loadEnv === 'function')
    //         ENV = global.loadEnv(__DIR__ + '../.env') || {};
    // } catch (e) { console.error(String("logger: .env parse – " + e)); }

    var ENV = {};

    const envPath = __DIR__+"../.env";
    console.log("envPath: " + envPath);
    // any of these now work
    ENV = load(__DIR__ + 'loadEnv.ajs').loadEnv(envPath);

    /* ---------- logging core ---------- */
    var LVL = { error: 40, warn: 30, info: 20, debug: 10 };
    var CLR = { error: '\u001b[31m', warn: '\u001b[33m',
                info: '\u001b[34m', debug: '\u001b[90m', reset: '\u001b[0m' };

    var cur = LVL[String(ENV.LOG_LEVEL || ENV.DEBUG || 'info').toLowerCase()] || LVL.info;
    var colour = String(ENV.LOG_COLOR || 'false').toLowerCase() === 'true';

    function stamp() { return java.time.ZonedDateTime.now().toString(); }
    function caller() {
        var s = new Error().stack.split(/\r?\n/);
        for (var i = 2; i < s.length; ++i) {
            var m = s[i].match(/\(?([^()]*\.ajs):(\d+)\)?/);
            if (m) return m[1] + ':' + m[2];
        }
        return '<unknown>';
    }

    function make(level) {
        return function () {
            if (LVL[level] < cur) return;
            var txt = Array.prototype.map.call(arguments, String).join(' ');
            var line = stamp() + ' [' + level.toUpperCase() + '] (' + caller() + ') ' + txt;
            if (colour) line = CLR[level] + line + CLR.reset;
            (level === 'error' ? console.error : console.log)(String(line));
        };
    }

    var log = make('info');
    log.error = make('error');
    log.warn  = make('warn');
    log.info  = make('info');
    log.debug = make('debug');
    log.setLevel = function (lvl) { cur = LVL[String(lvl).toLowerCase()] || cur; };
    log.getLevel = function () { return Object.keys(LVL).find(k => LVL[k] === cur); };

    /* ---------- publish ---------- */
    global.log = log;
    return { log: log };                // ← IIFE returns this object
})(this);

if (typeof module !== 'undefined' && module.exports !== undefined) {
    module.exports = loggerExport;
}

/*  FINAL expression so load() → {log}  */
loggerExport;
