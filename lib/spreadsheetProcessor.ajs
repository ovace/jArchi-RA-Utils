/**
 * ./lib/spreadsheetProcessor.ajs
 *
 * A reusable engine to normalize and process spreadsheet data
 * into record objects, merging spreadsheet values with model
 * properties and optional dynamic values.
 *
 * @module lib/spreadsheetProcessor
 */
// Load shared libraries
const libPath = __DIR__ ;  
const envPath = __DIR__+"../.env";
console.log("envPath: " + envPath); 
const { loadEnv } = require(libPath + 'loadEnv.ajs').loadEnv(envPath);
const { log } = require(libPath + 'logger.ajs');  
const { normalize, mergeDynamicProps, buildProperties } = require(libPath +'dataUtils.ajs');  
const { getGrouping, getElementViews, relTypeIds } = require(libPath +'commonUtils.ajs');

/**
 * @typedef {Object} ProcessorConfig
 * @property {string[]} baseOutputCols        - Columns always copied from sheet to output
 * @property {string[]} modelProperties      - Keys to pull from the model via buildProperties()
 * @property {string[]} supplementProperties - Keys to default when no model element found
 */

/**
 * Process raw sheet data into an array of merged record objects.
 *
 * @param {Array|Object} data
 *   Either an array of row-objects, or a 2D array of raw rows (with header+title rows).
 * @param {Function} colIdxFn
 *   Function taking a column name and returning its index in raw rows.
 * @param {Object} matchedIds
 *   Map of element-IDs already matched; new matches will be added here.
 * @param {string[]} propKeys
 *   List of all property keys to include in each output record.
 * @param {ProcessorConfig} config
 *   Configuration containing baseOutputCols, modelProperties, supplementProperties.
 * @returns {Object[]} Array of output records, one per sheet row.
 *
 * @throws {TypeError} if `data` is not an array or object.
 */
function processSpreadsheetRows(data, colIdxFn, matchedIds, propKeys, config) {
  log.debug('Starting processSpreadsheetRows', {
    dataType: typeof data,
    propKeys,
    config
  });

  // 1. Normalize input into an array of { row, sheetRow } or row-objects
  let normalizedData;
  if (Array.isArray(data)) {
    if (data.length > 0 && typeof data[0] === 'object' && !Array.isArray(data[0])) {
      // Already array of objects
      normalizedData = data;
    }
    else {
      // Raw array of arrays: drop title+header, wrap each
      normalizedData = data
        .slice(2)
        .map((r, i) => ({ row: r, sheetRow: i + 2 }));
    }
  }
  else if (data !== null && typeof data === 'object') {
    normalizedData = [ data ];
  }
  else {
    throw new TypeError(`Unsupported data type for "data": ${typeof data}`);
  }

  // 2. Log first three entries for inspection
  const sample = normalizedData.slice(0, 3);
  log.debug('First 3 normalized rows:\n' +
    sample.map((entry, i) =>
      `#${i}: ${JSON.stringify(entry, null, 2)}`
    ).join('\n\n')
  );

  log.info(`Processing ${normalizedData.length} spreadsheet rows...`);

  // 3. Prepare context for buildProperties
  const ctx = { getGrouping, getElementViews, relTypeIds };

  /** @type {Object[]} */
  const output = [];

  // 4. For each normalized row, merge spreadsheet + model + dynamic props
  normalizedData.forEach((entry, idx) => {
    const sr = entry.sheetRow || (idx + 1);
    log.debug(`Processing record ${idx + 1}/${normalizedData.length} (sheet row ${sr})`);

    // --- 1. Spreadsheet values
    const spreadsheetProps = {};
    propKeys.forEach(k => spreadsheetProps[k] = '');
    config.baseOutputCols.forEach(col => {
      spreadsheetProps[col] = entry.row[colIdxFn(col)] || '';
    });
    spreadsheetProps.nameMatch  = '0';
    spreadsheetProps.descMatch  = '0';
    spreadsheetProps.modelOnly  = '0';

    // --- 2. Model lookup
    let modelProps = {};
    const fc = normalize(entry.row[colIdxFn('Functional composition')] || '');
    const el = $('element').filter(e => normalize(e.name) === fc).first();
    if (el) {
      spreadsheetProps.nameMatch = '1';
      if (normalize(el.documentation || '') ===
          normalize(entry.row[colIdxFn('Description')] || '')
      ) {
        spreadsheetProps.descMatch = '1';
      }
      matchedIds[el.id] = true;
      modelProps = buildProperties(
        el,
        config.modelProperties,
        config.supplementProperties,
        ctx
      );
    }
    else {
      // default supplement if no element found
      config.supplementProperties.forEach(supp => {
        if (supp.key === 'inView') modelProps[supp.key] = 'Orphan';
      });
    }

    // --- 3. (Optional) dynamic values placeholder
    const dynVals = {}; // e.g. collectPropValues(el, propKeys);

    // --- 4. Merge priority: spreadsheet < model < dynamic
    const record = {};
    propKeys.forEach(k => record[k] = '');
    mergeDynamicProps(record, spreadsheetProps, propKeys);
    mergeDynamicProps(record, modelProps,       propKeys);
    mergeDynamicProps(record, dynVals,          propKeys, true);

    // --- 5. Guarantee overrides for specific columns
    ['Taxonomy Classification', 'Level'].forEach(col => {
      if (col in record) {
        record[col] = entry.row[colIdxFn(col)] || record[col] || '';
      }
    });

    output.push(record);
  });

  log.info('Finished processing spreadsheet rows.');
  return output;
}

module.exports = {
  processSpreadsheetRows
};
