/**
 * ./lib/excelUtils.ajs
 *
 * Reusable loader/validator for Excel sheets via SheetJS.
 */
// #region dependencies and glabal variables
const File    = Java.type("java.io.File");

// 1. Load environment from parent folder’s .env
const parentDir = new File(__DIR__.replace(/[\\/]+$/, "")).getParent() + File.separator;
var env = require(__DIR__ + "loadEnv.ajs").loadEnv(parentDir + ".env");

const log     = require(__DIR__ + "logger.ajs").log;
const common  = require(__DIR__ + "commonUtils.ajs");
const dataUtils = require(__DIR__ + "dataUtils.ajs");
const XLSX = require(__DIR__ + "xlsx.full.min.js");
const javaBase64   = java.util.Base64;
const fileWr       = java.nio.file.Files;
const filePathUtil = java.nio.file.Paths;
const path = java.nio.file.Paths;
const fs   = java.nio.file.Files;
const { promptForFile } = common;  // >>> new import

// simple in-memory cache keyed by "filePath|sheetName"
var _excelCache = {};

// #endregion dependencies and glabal variables

/**
 * >>> NEW
 * Ensure the given path exists and has an Excel extension.
 * If not, prompt the user to pick one via a file dialog.
 *
 * @param {string} filePath
 * @returns {string} a valid Excel file path
 * @throws {Error} if user cancels selection
 */
function ensureExcelFile(filePath) {
    var p       = path.get(filePath || "");
    var exists  = fs.exists(p);
    var isExcel = typeof filePath === 'string' && filePath.match(/\.(xlsx|xls)$/i);

    if (!exists || !isExcel) {
        log.warn(`Invalid or missing Excel file: "${filePath}"`);
        // promptForFile(title, [extensions])
        var chosen = promptForFile("Select an Excel file", ["xlsx", "xls"], window.promptOpenFile);
        if (!chosen) {
            log.error("Excel file selection cancelled by user.");
            throw new Error("Excel file selection required");
        }
        log.info(`User selected Excel file: ${chosen}`);
        return chosen;
    }
    return filePath;
}

/**
 * >>> NEW
 * Validate that the sheet’s header row contains all required columns.
 *
 * @param {Array<Object>} rows             – array of row-objects
 * @param {Array<string>} requiredHeaders  – list of header names to check
 * @throws {Error} if any required header is missing
 */
function validateHeaders(rows, requiredHeaders) {
    if (!Array.isArray(rows) || rows.length === 0) {
        log.warn("No rows available to validate headers against.");
        return;
    }
    var available = Object.keys(rows[0]);
    var missing   = requiredHeaders.filter(h => available.indexOf(h) === -1);

    if (missing.length) {
        log.error(`Missing required headers: ${missing.join(', ')}`);
        throw new Error(`Required headers not found: ${missing.join(', ')}`);
    }
    log.info("All required headers present.");
}

/**
 * Read an Excel file into either an object keyed by a column or a flat array.
 *
 * @param {Object} opts
 * @param {string} opts.filePath         – Absolute path to the .xlsx/.xls file
 * @param {string} [opts.sheetName]      – Sheet to read; defaults to first
 * @param {string} opts.keyHeader        – Column header whose values become object keys
 * @param {"object"|"array"} [opts.outputType="object"]
 *                                        – "object" → { key: rowObj, … }
 *                                        – "array"  → [rowObj, …]
 * @param {Array<string>} [opts.requiredHeaders]
 *                                        – list of headers to validate after read
 * @returns {Object|Array<Object>}
 * @throws {Error} on I/O, parse, missing header, or validation failure
 */
function loadExcelData({
    filePath,
    sheetName,
    keyHeader,
    outputType,
    requiredHeaders    // >>> new optional param
}) {
    outputType = outputType === 'array' ? 'array' : 'object';

    // >>> ensure valid file or prompt user
    filePath = ensureExcelFile(filePath);

    var cacheKey = filePath + '|' + (sheetName || '<first>');
    if (_excelCache[cacheKey] && _excelCache[cacheKey][outputType]) {
        log.debug(`Cache hit: ${cacheKey} [${outputType}]`);
        return _excelCache[cacheKey][outputType];
    }

    log.info(`Loading Excel file: ${filePath}`);
    var bytes, workbook;
    try {
        bytes    = fs.readAllBytes(path.get(filePath));
        var b64  = java.util.Base64.getEncoder().encodeToString(bytes);
        workbook = XLSX.read(b64, { type: 'base64' });
    }
    catch (ioErr) {
        log.error(`Failed to read or parse Excel file: ${ioErr}`);
        throw ioErr;
    }

    // choose sheet
    var sheets    = workbook.SheetNames;
    if (!sheets.length) {
        throw new Error("Workbook contains no sheets");
    }
    var targetName = (sheetName && sheets.includes(sheetName))
                   ? sheetName
                   : sheets[0];
    if (sheetName && targetName !== sheetName) {
        log.warn(`Sheet "${sheetName}" not found, using "${targetName}"`);
    }
    log.debug(`Using sheet: ${targetName}`);

    // parse to row-objects
    var sheet = workbook.Sheets[targetName];
    var rows  = XLSX.utils.sheet_to_json(sheet, { defval: null });
    log.info(`Parsed ${rows.length} rows from "${targetName}"`);

    // basic header check for keyHeader
    if (!rows.length || !(keyHeader in rows[0])) {
        throw new Error(`Key header "${keyHeader}" not found`);
    }

    // >>> additional header validation step
    if (Array.isArray(requiredHeaders) && requiredHeaders.length) {
        validateHeaders(rows, requiredHeaders);
    }

    // build outputs
    var asArray  = rows;
    var asObject = {};
    for (var rec of rows) {
        var key = rec[keyHeader];
        if (key == null) {
            log.warn(`Row missing key "${keyHeader}", skipping`);
            continue;
        }
        if (outputType === 'object') {
            if (asObject[key] !== undefined) {
                log.warn(`Duplicate key "${key}" – overwriting`);
            }
            asObject[key] = rec;
        }
    }

    // cache & return
    _excelCache[cacheKey] = { object: asObject, array: asArray };
    return outputType === 'array' ? asArray : asObject;
}

/**
 * Loads an Excel sheet, converts it to JS objects, applies extensions,
 * validates presence of required columns, and logs rich diagnostics.
 *
 * @param {string}       excelPath        Absolute path to the .xlsx/.xlsm file
 * @param {ExcelOptions} opts
 * @returns {Object[]}   Array of row‐objects keyed by header
 * @throws {Error}       On missing sheet, missing columns, or mis‐loaded XLSX
 */
function loadAndPrepareSheet(excelPath, opts) {
  const { sheetName, extHeadersMap, requiredColumns } = opts || {};

  // ---- Parameter validation ----
  if (typeof excelPath !== "string" || !excelPath) {
    throw new TypeError("loadAndPrepareSheet: excelPath must be a non-empty string");
  }
  if (typeof sheetName !== "string" || !sheetName) {
    throw new TypeError("loadAndPrepareSheet: sheetName is required");
  }
  if (!dataUtils.isObject(extHeadersMap)) {
    throw new TypeError("loadAndPrepareSheet: extHeadersMap must be an object");
  }
  if (!Array.isArray(requiredColumns)) {
    throw new TypeError("loadAndPrepareSheet: requiredColumns must be an array");
  }

  log.debug(`Loading workbook from: ${excelPath}`);

  // ---- Ensure XLSX is loaded ----
  if (typeof XLSX !== "object" || typeof XLSX.read !== "function") {
    log.error("SheetJS (XLSX) is not loaded or missing .read()");
    throw new Error("SheetJS not available (did you load xlsx.full.min.js?)");
  }

  // ---- 1) Read workbook ----
  const wbData = common.readFileBase64(excelPath);
  const wb     = XLSX.read(wbData, { type: "base64" });
  log.debug(`Workbook contains sheets: ${wb.SheetNames.join(", ")}`);

  // ---- 2) Select worksheet ----
  const sheet = wb.Sheets[sheetName];
  if (!sheet) {
    log.error(`Sheet "${sheetName}" not found in workbook`);
    throw new Error(`Sheet "${sheetName}" not found`);
  }
  log.debug(`Reading sheet "${sheetName}"`);

  // ---- 3) Extract raw rows (to get headers) ----
  const rawRows = XLSX.utils.sheet_to_json(sheet, { header: 1, raw: false });
  if (rawRows.length < 2) {
    log.error("Expected at least 2 rows (title + header)");
    throw new Error("Insufficient rows for header extraction");
  }

  // ---- 4) Trim headers from second Excel row ----
  const headers = rawRows[1].map(cell => cell != null ? cell.toString().trim() : "");
  if (!headers.length) {
    throw new Error("No headers found in row 2");
  }
  log.debug("Extracted headers:", JSON.stringify(headers));

  // ---- 5) Load data rows keyed by those headers ----
  let data = XLSX.utils.sheet_to_json(sheet, {
    header: headers,
    range:  2,      // skip first two rows
    defval: "",     // blank cells → ""
    raw:    false
  });
  log.debug(`Parsed ${data.length} data rows`);

  if (!data.length) {
    log.warn("No data rows found after header; returning empty array");
    return [];
  }

  // ---- 6) Apply external references ----
  data = dataUtils.generateExtRef(data, extHeadersMap);
  log.debug(
    `After generateExtRef: ${data.length} rows, ext map: ${JSON.stringify(extHeadersMap)}`
  );

  // ---- 7) Validate extension headers ----
  const finalHdrs = Object.keys(data[0]).map(h => h.toString().trim());
  const missingExt = Object.values(extHeadersMap)
    .filter(col => !finalHdrs.includes(col));
  if (missingExt.length) {
    log.error("Missing extension columns:", missingExt.join(", "));
    throw new Error(`Missing expected columns: ${missingExt.join(", ")}`);
  }

  // ---- 8) Validate required columns ----
  const idxOf = name => finalHdrs.indexOf(name);
  common.validateColumns(idxOf, requiredColumns);
  log.info("All required columns are present");

  // ---- 9) Preview first five rows ----
  data.slice(0,5).forEach((row, i) => {
    log.debug(`Row ${i+1}: ${JSON.stringify(row, null, 2)}`);
  });

  return data;
}

/**
 * Filters rows according to CONFIG.filterMap wildcard rules.
 *
 * - Accepts `data` as either:
 *     • Array of row-objects: [ { A:…, B:… }, … ]
 *     • Object of row-objects: { key1: { A:…, B:… }, key2: {…}, … }
 * - Skips filters for columns not present in any row.
 * - Treats null/undefined/missing cells as “no match.”
 * - First removes any row matching an OUT-pattern.
 * - Then, if any IN-patterns exist, keeps only rows matching at least one IN-pattern.
 * - Logs diagnostics via log.debug/info/warn/error.
 *
 * @param {Object[]|Object.<string,Object>} data
 *   The raw Excel data: array or keyed object of flat row-objects.
 * @param {Object.<string,Object.<string,"IN"|"OUT">>} filterMap
 *   Map of columnHeader → { wildcardPattern: "IN"|"OUT", … }.
 * @returns {Object[]|Object.<string,Object>}
 *   Filtered data in the same shape as the input.
 */
function filterDataByConfigMap(data, filterMap) {
  // --- sanity checks on data shape ---
  const isArray = Array.isArray(data);
  const isObject = !isArray && data !== null && typeof data === "object";
  if (!isArray && !isObject) {
    log.error("[filterDataByConfig] 'data' must be an Array or Object");
    return isArray ? [] : {};
  }

  // quick‐return if no filters
  if (!filterMap || typeof filterMap !== "object" || Object.keys(filterMap).length === 0) {
    log.info("[filterDataByConfig] no filterMap supplied, returning original data");
    return data;
  }

  // extract a list of entries [key,row]
  // for arrays, key is numeric index; for objects, key is original property name
  const entries = isArray
    ? data.map((row, idx) => [idx, row])
    : Object.entries(data);

  const totalRows = entries.length;
  if (totalRows === 0) {
    log.info("[filterDataByConfig] no rows to filter (empty data)");
    return data;
  }

  // determine which columns actually exist in the first row
  const sampleRow = entries[0][1];
  const sampleCols = Object.keys(sampleRow);

  // build an effective filterMap containing only existing columns
  const effectiveMap = {};
  for (const col of Object.keys(filterMap)) {
    if (!sampleCols.includes(col)) {
      log.warn(`[filterDataByConfig] column '${col}' not found—skipping its patterns`);
    } else {
      effectiveMap[col] = filterMap[col];
    }
  }
  if (Object.keys(effectiveMap).length === 0) {
    log.info("[filterDataByConfig] no valid filter columns, returning original data");
    return data;
  }

  log.debug(`[filterDataByConfig] filtering ${totalRows} rows on columns: ${Object.keys(effectiveMap).join(", ")}`);

  // escape regex metachars except * and ?
  function _escapeLiteral(str) {
    return str.replace(/[-[\]{}()+.,\\^$|#\s]/g, "\\$&");
  }

  // compile wildcard patterns → regex per column
  const compiled = {};
  for (const [col, patterns] of Object.entries(effectiveMap)) {
    compiled[col] = Object.entries(patterns).map(([pat, flag]) => {
      const regexStr = "^" +
        pat.split("").map(ch =>
          ch === "*" ? ".*" :
          ch === "?" ? "." :
          _escapeLiteral(ch)
        ).join("") +
        "$";
      return { regex: new RegExp(regexStr), flag };
    });
  }

  // helper: does this row match ANY OUT-pattern?
  function isOut(row) {
    return Object.entries(compiled).some(([col, rules]) =>
      rules.some(({ regex, flag }) => {
        const cell = row[col];
        return flag === "OUT" && cell != null && regex.test(String(cell));
      })
    );
  }

  // helper: does this row match ANY IN-pattern?
  function isIn(row) {
    return Object.entries(compiled).some(([col, rules]) =>
      rules.some(({ regex, flag }) => {
        const cell = row[col];
        return flag === "IN" && cell != null && regex.test(String(cell));
      })
    );
  }

  // 1) OUT-phase: filter out rows matching any OUT rule
  const afterOut = entries.filter(([, row]) => !isOut(row));
  log.debug(`[filterDataByConfig] OUT-phase: removed ${totalRows - afterOut.length} rows; ${afterOut.length} remain`);

  // 2) IN-phase: if we have any IN rules, keep only rows matching at least one
  const hasInRule = Object.values(compiled).flat().some(r => r.flag === "IN");
  const finalEntries = hasInRule
    ? afterOut.filter(([, row]) => isIn(row))
    : afterOut;

  if (hasInRule) {
    log.debug(`[filterDataByConfig] IN-phase: kept ${finalEntries.length} of ${afterOut.length} rows`);
  }

  // reconstruct into original shape
  let result;
  if (isArray) {
    result = finalEntries.map(([, row]) => row);
  } else {
    result = Object.fromEntries(finalEntries);
  }

  log.info(`[filterDataByConfig] filtering complete: ${finalEntries.length} of ${totalRows} rows returned`);
  return result;
}

/**
 * Ensure a valid Excel output file path. If none is provided or the extension
 * isn’t .xlsx/.xls, prompts the user to pick or name one.
 *
 * @param {string} filePath
 * @returns {string} A writable .xlsx or .xls path
 * @throws {Error} if the user cancels the dialog
 */
function ensureOutputFile(filePath) {
  var isExcel = typeof filePath === 'string' && filePath.match(/\.(xlsx|xls)$/i);
  if (!isExcel) {
    log.warn(`Invalid or missing output file: "${filePath}"`);
    var chosen = promptForFile("Select or name your output Excel file", ["xlsx","xls"]);
    if (!chosen) {
      log.error("Output file selection cancelled by user.");
      throw new Error("Excel output file required");
    }
    log.info(`User will write to: ${chosen}`);
    return chosen;
  }
  return filePath;
}

/**
 * Save a JS data object/array to an Excel file using SheetJS.
 *
 * @param {Object} opts
 * @param {Array<Object>|Object<string,Object>} opts.data
 *        The data to save: either an array of row‐records or an object of records.
 * @param {string} opts.outputFile   – Desired output path; will prompt if invalid.
 * @param {string} [opts.sheetName]  – Sheet name; defaults to 'Sheet1'.
 * @param {Array<string>} [opts.headerList]
 *        Optional list of column headers to include (and their order).
 *        If omitted or empty, all columns from the first row will be used.
 * @throws {Error} on missing headers, I/O, or user cancellation
 */
function saveDataToExcel({ data, outputFile, sheetName, headerList }) {
  // 1. Validate / prompt for output path
  outputFile = ensureOutputFile(outputFile);

  // 2. Flatten object → array if necessary
  const rows = Array.isArray(data)
             ? data
             : Object.values(data);

  if (rows.length === 0) {
    log.warn("No data to write; skipping Excel save.");
    return;
  }

  // 3. Determine which headers to write
  const allCols = Object.keys(rows[0]);
  let headers;
  if (Array.isArray(headerList) && headerList.length) {
    // Validate requested headers exist
    const missing = headerList.filter(h => !allCols.includes(h));
    if (missing.length) {
      const msg = `Headers not found in data: ${missing.join(', ')}`;
      log.error(msg);
      throw new Error(msg);
    }
    headers = headerList;
    log.info(`Using provided headerList: ${headers.join(', ')}`);
  } else {
    headers = allCols;
    log.info(`No headerList provided; using all columns: ${headers.join(', ')}`);
  }

  // 4. Build a worksheet from the rows, selecting only the desired headers
  //    json_to_sheet will include null for missing keys if defval set—but
  //    since we've validated, every header exists on at least the first row.
  const ws = XLSX.utils.json_to_sheet(
    rows.map(r => {
      // Project each record to only the chosen headers
      const proj = {};
      headers.forEach(h => proj[h] = r[h]);
      return proj;
    }),
    { header: headers, skipHeader: false }
  );

  // 5. Create a new workbook and append the sheet
  const wb = XLSX.utils.book_new();
  const name = sheetName || "Sheet1";
  XLSX.utils.book_append_sheet(wb, ws, name);
  log.info(`Generating workbook with ${rows.length} rows on sheet "${name}"`);

  // 6. Serialize to Base64 and write via Java NIO
  const b64 = XLSX.write(wb, { bookType: 'xlsx', type: 'base64' });
  const bytes   = javaBase64.getDecoder().decode(b64);
  const outPath = filePathUtil.get(outputFile);
  try {
    fileWr.write(outPath, bytes);
    log.info(`Excel file saved successfully: ${outputFile}`);
  }
  catch (e) {
    log.error(`Failed to write Excel file: ${e}`);
    throw e;
  }
}


// export everything, including our new helpers
module.exports = Object.assign(module.exports || {}, {
    loadAndPrepareSheet,
    loadExcelData,
    ensureExcelFile,   // >>> new
    validateHeaders,    // >>> new
    ensureOutputFile,
    saveDataToExcel,
    filterDataByConfigMap
});
