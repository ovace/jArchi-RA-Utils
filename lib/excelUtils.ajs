/**
 * ./lib/excelUtils.ajs
 *
 * Reusable loader/validator for Excel sheets via SheetJS.
 */

const File    = Java.type("java.io.File");
const log     = require(__DIR__ + "logger.ajs").log;
const common  = require(__DIR__ + "common_utils.ajs");
const dataUtils = require(__DIR__ + "data_utils.ajs");

// 1. Load environment from parent folder’s .env
const parentDir = new File(__DIR__.replace(/[\\/]+$/, "")).getParent() + File.separator;
load(__DIR__ + "loadEnv.ajs").loadEnv(parentDir + ".env");

// 2. Load the SheetJS bundle so that global `XLSX` is available
load(__DIR__ + "xlsx.full.min.js");

// -----------------------------------------------------------------------------

/**
 * @typedef ExcelOptions
 * @property {string}                sheetName        The name of the tab to read
 * @property {Record<string,string>} extHeadersMap   Map of new‐column → source‐column
 * @property {string[]}              requiredColumns  Columns that must be present
 */

/**
 * Loads an Excel sheet, converts it to JS objects, applies extensions,
 * validates presence of required columns, and logs rich diagnostics.
 *
 * @param {string}       excelPath        Absolute path to the .xlsx/.xlsm file
 * @param {ExcelOptions} opts
 * @returns {Object[]}   Array of row‐objects keyed by header
 * @throws {Error}       On missing sheet, missing columns, or mis‐loaded XLSX
 */
function loadAndPrepareSheet(excelPath, opts) {
  const { sheetName, extHeadersMap, requiredColumns } = opts || {};

  // ---- Parameter validation ----
  if (typeof excelPath !== "string" || !excelPath) {
    throw new TypeError("loadAndPrepareSheet: excelPath must be a non-empty string");
  }
  if (typeof sheetName !== "string" || !sheetName) {
    throw new TypeError("loadAndPrepareSheet: sheetName is required");
  }
  if (!dataUtils.isObject(extHeadersMap)) {
    throw new TypeError("loadAndPrepareSheet: extHeadersMap must be an object");
  }
  if (!Array.isArray(requiredColumns)) {
    throw new TypeError("loadAndPrepareSheet: requiredColumns must be an array");
  }

  log.debug(`Loading workbook from: ${excelPath}`);

  // ---- Ensure XLSX is loaded ----
  if (typeof XLSX !== "object" || typeof XLSX.read !== "function") {
    log.error("SheetJS (XLSX) is not loaded or missing .read()");
    throw new Error("SheetJS not available (did you load xlsx.full.min.js?)");
  }

  // ---- 1) Read workbook ----
  const wbData = common.readFileBase64(excelPath);
  const wb     = XLSX.read(wbData, { type: "base64" });
  log.debug(`Workbook contains sheets: ${wb.SheetNames.join(", ")}`);

  // ---- 2) Select worksheet ----
  const sheet = wb.Sheets[sheetName];
  if (!sheet) {
    log.error(`Sheet "${sheetName}" not found in workbook`);
    throw new Error(`Sheet "${sheetName}" not found`);
  }
  log.debug(`Reading sheet "${sheetName}"`);

  // ---- 3) Extract raw rows (to get headers) ----
  const rawRows = XLSX.utils.sheet_to_json(sheet, { header: 1, raw: false });
  if (rawRows.length < 2) {
    log.error("Expected at least 2 rows (title + header)");
    throw new Error("Insufficient rows for header extraction");
  }

  // ---- 4) Trim headers from second Excel row ----
  const headers = rawRows[1].map(cell => cell != null ? cell.toString().trim() : "");
  if (!headers.length) {
    throw new Error("No headers found in row 2");
  }
  log.debug("Extracted headers:", JSON.stringify(headers));

  // ---- 5) Load data rows keyed by those headers ----
  let data = XLSX.utils.sheet_to_json(sheet, {
    header: headers,
    range:  2,      // skip first two rows
    defval: "",     // blank cells → ""
    raw:    false
  });
  log.debug(`Parsed ${data.length} data rows`);

  if (!data.length) {
    log.warn("No data rows found after header; returning empty array");
    return [];
  }

  // ---- 6) Apply external references ----
  data = dataUtils.generateExtRef(data, extHeadersMap);
  log.debug(
    `After generateExtRef: ${data.length} rows, ext map: ${JSON.stringify(extHeadersMap)}`
  );

  // ---- 7) Validate extension headers ----
  const finalHdrs = Object.keys(data[0]).map(h => h.toString().trim());
  const missingExt = Object.values(extHeadersMap)
    .filter(col => !finalHdrs.includes(col));
  if (missingExt.length) {
    log.error("Missing extension columns:", missingExt.join(", "));
    throw new Error(`Missing expected columns: ${missingExt.join(", ")}`);
  }

  // ---- 8) Validate required columns ----
  const idxOf = name => finalHdrs.indexOf(name);
  common.validateColumns(idxOf, requiredColumns);
  log.info("All required columns are present");

  // ---- 9) Preview first five rows ----
  data.slice(0,5).forEach((row, i) => {
    log.debug(`Row ${i+1}: ${JSON.stringify(row, null, 2)}`);
  });

  return data;
}

// Export
module.exports = {
  loadAndPrepareSheet
};
