/**
 * common-utils.ajs
 * Common utility functions for jArchi scripts.
 *
 * Dependencies:
 *   - Console API (console.clear/show/log/error)
 *   - Java interoperability for File I/O and list conversion.
 */

// Load shared libraries
  const libPath = __DIR__ ;  
  const envPath = __DIR__+"../.env";
  console.log("envPath: " + envPath); 
  const loadEnv = load(libPath + 'loadEnv.ajs').loadEnv(envPath);
  const { log } = load(libPath + 'logger.ajs'); 
  const XLSX   = require(libPath + 'xlsx.full.min.js');

//   const { log, 
//           debug, 
//           warn, 
//           error 
//         } = logger;

var CONFIG = {
    debug: true,
    escapeMap: {
        "#comma#": ",",
        "#squote#": "'",
        "#dquote#": '"',
        "#tab#": "\t",
        "#linebreak#": "\n"
    },
};

/**
 * Prompt the user to select a file or directory.
 * @param {string} title - Dialog title.
 * @param {Object[]} filters - Array of filter objects for file dialog.
 * @param {Function} promptFn - window.promptOpenFile or window.promptOpenDirectory
 * @returns {string|null} Selected path or null if cancelled.
 */
function promptForFile(title="Select File", filters, promptFn) {
    try {
        const path = promptFn({ title, filters });
        return path;
    } catch (e) {
        console.log.error("promptForFile: " + e);
        return null;
    }
}

/**
 * Convert a Java list or array-like to a native JS array.
 * @param {JavaList|Array} list
 * @returns {any[]} Native JS array.
 */
function toJsArray(list) {
    if (list == null) throw new Error('toJsArray(): input is null or undefined');
    return Array.isArray(list) ? list : Java.from(list);
}

/**
 * Build a CSV header line from a list of column keys.
 * @param {string[]} baseHeaders
 * @returns {string} CSV header line.
 */
function buildHeader(baseHeaders) {
    const hdrs = toJsArray(baseHeaders);
    return hdrs.join(',');
}

/**
 * Build one CSV line for a record object, escaping all string values using escapeString.
 * Each value is quoted and properly escaped for CSV output.
 * Headers are not escaped here (handled elsewhere).
 * 
 * @param {Object} record - Key/value map for a row.
 * @param {string[]} baseHeaders - List of header keys in order.
 * @returns {string} Quoted CSV row.
 */
function buildCsvLine(record, baseHeaders) {
    const hdrs = toJsArray(baseHeaders);
    const csvLine = hdrs.map(h => {
        let val = record[h];
        if (val === undefined || val === null) val = '';
        // Apply custom escaping to string values only
        let escapedVal;
        if (typeof val === 'string') {
            escapedVal = escapeString(val);
            // Further escape embedded double quotes for CSV
            escapedVal = escapedVal.replace(/"/g, '""');
        } else {
            escapedVal = String(val).replace(/"/g, '""');
        }
        return `"${escapedVal}"`;
    }).join(',');

    // Optional robust debug logging
    log.debug(`[buildCsvLine] Built CSV line: ${csvLine}`);   

    return csvLine;
}

// /** Build one CSV line for a merged record object. */
// function buildCsvLine(elem, baseHeaders) {
// const hdrs = toJsArray(baseHeaders);
// const fields = [];
// hdrs.forEach(function(key) {
//     let raw = elem[key] != null ? elem[key] : '';
//     if (Array.isArray(raw)) raw = formatForCSV(raw);
//     if (typeof raw === 'string') raw = '"' + raw.replace(/"/g,'""') + '"';
//     fields.push(raw);
// });
// if log.debug('buildCsvLine: id=' + (elem._id||elem.ID) + ', inView=' + elem.inView);
// return fields.join(',');
// }

/**
 * Normalize a string for case/whitespace-insensitive matching.
 * @param {string} input
 * @returns {string}
 */
function normalize(input) {
    return input.toString().replace(/\s+/g, ' ').trim().toLowerCase();
}

/**
   * Write CSV data (string or array) to disk.
   * @param {string[]|java.util.List|string} lines
   * @param {string} outputPath
   */
function writeCsv(lines, outputPath) {
if (lines == null) throw new Error('writeCsv(): no data provided');
const all = (typeof lines === 'string')
    ? lines.split('\n')
    : toJsArray(lines);
log.debug('writeCsv: writing ' + all.length + ' lines → ' + outputPath);    

const File       = Java.type('java.io.File');
const FileWriter = Java.type('java.io.FileWriter');
const writer     = new FileWriter(new File(outputPath));
try {
    writer.write(all.join('\n'));
} finally {
    writer.close();
}
}

function readCSV(filePath,delimiter){
    var Paths=Java.type("java.nio.file.Paths"),Files=Java.type("java.nio.file.Files");
    var csv=new java.lang.String(Files.readAllBytes(Paths.get(filePath)),"UTF-8");
    var lines=csv.replace(/\r/g,'').split('\n').filter(Boolean);
    var headers=lines[CONFIG.headerRowIndex].split(delimiter).map(function(s){return s.trim();});
    var data=lines.slice(CONFIG.headerRowIndex+1).map(function(line){
        var fields=line.split(delimiter),row={};
        headers.forEach(function(h,idx){row[h]=(fields[idx]||"").trim();});
        return row;
    });
    log.debug("Parsed "+data.length+" rows from CSV");
    log.debug("Headers: "+headers.join(", "));
    return{headers:headers,data:data};
}

function getRowValue(row, key) {
    if (!row) {
        log.debug(`getRowValue: Row is undefined for key '${key}'`);
        return undefined;
    }
    if (row[key] !== undefined) {
        log.debug(`getRowValue: Found exact match for key '${key}' with value '${row[key]}'`);
        return row[key];
    }
    var lkey = key.toLowerCase().replace(/[\s_]/g, "");
    for (var k in row) {
        if (k && k.toLowerCase().replace(/[\s_]/g, "") === lkey) {
            log.debug(`getRowValue: Matched key '${key}' to column '${k}' with value '${row[k]}'`);
            return row[k];
        }
    }
    log.debug(`getRowValue: No match found for key '${key}'`);
    return undefined;
}

function getActiveModel(){
    if(typeof model==="undefined"||!model)throw new Error("No active model found.");
    log.info("Using model: "+model.name);
    return model;
}

/**
 * Escape all special characters in `input` by replacing them
 * with their corresponding tokens from CONFIG.escapeMap.
 *
 * @param {string} input
 * @returns {string} The escaped string.
 */
function escapeString(input) {
  if (typeof input !== "string") {
    return input;
  }

  let result = input;
  // For each token → char mapping, replace char with token
  Object.entries(CONFIG.escapeMap).forEach(([token, char]) => {
    // Split/join avoids regex pitfalls with control chars
    result = result.split(char).join(token);
  });

  return result;
}

/**
 * Un‐escape all tokens in `input` by replacing them
 * with their corresponding characters from CONFIG.escapeMap.
 *
 * @param {string} input
 * @returns {string} The unescaped string.
 */
function unescapeString(input) {
  if (typeof input !== "string") {
    return input;
  }

  let result = input;
  // For each token → char mapping, replace token with char
  Object.entries(CONFIG.escapeMap).forEach(([token, char]) => {
    result = result.split(token).join(char);
  });

  return result;
}

/**
 * Escape folder names containing special characters or spaces for use in selector.
 * Wraps names with quotes and escapes embedded quotes.
 * 
 * @param {string} name
 * @returns {string} escaped name suitable for JArchi selector
 */
function escapeFolderName(name) {
    var escaped = name.replace(/"/g, '\\"');
    return '"' + escaped + '"';
}

/**
 * Normalizes a folder name by stripping all non-alphanumeric characters.
 * @param {string} name
 * @returns {string} Normalized folder name
 */
function normalizeFolderName(name) {
    if (!name) return "";
    return String(name).replace(/[^a-zA-Z0-9]/g, "");
}

/**
 * Gets all root folders in the model as an array, and also builds a map by name.
 * Uses jArchi idiom for maximum compatibility. Logs each folder.
 *
 * @param {object} model - The ArchiMate model object
 * @returns {{ array: object[], map: object }}
 *   - array: JS array of root folder objects
 *   - map: JS object, name → folder
 */
function getRootFolders(model) {
    if (!model) {
        log.error("getRootFolders: model is undefined.");
        return { array: [], map: {} };
    }
    // Use jArchi idiom: get all direct child folders of the model
    const rootFoldersArr = $(model).children('folder').toArray();
    if (rootFoldersArr.length === 0) {
        log.warn("getRootFolders: No root folders found in the model.");
    } else {
        log.debug("Root folders (names): " + rootFoldersArr.map(f => f.name).join(", "));
    }
    // Build a map by name for quick lookup
    const rootFoldersByName = {};
    rootFoldersArr.forEach(function(folder) {
        rootFoldersByName[folder.name] = folder;
        log.debug(`[getRootFolders] Mapped root folder: '${folder.name}'`);
    });
    return { array: rootFoldersArr, map: rootFoldersByName };
}

/**
 * Gets all immediate subfolders of a folder as a JS array.
 * Logs found subfolders.
 *
 * @param {object} folder - Parent folder object
 * @returns {object[]} Array of subfolder objects
 */
function getSubfolders(folder) {
    if (!folder) {
        log.error("getSubfolders: parent folder is undefined.");
        return [];
    }
    const subfolders = $(folder).children('folder').toArray();
    log.debug(`[getSubfolders] Folder '${folder.name}' has subfolders: [${subfolders.map(f => f.name).join(", ")}]`);
    return subfolders;
}

/**
 * Find the first folder with the given name using JArchi selector syntax.
 * Logs the result to the console.
 * 
 * @param {string} folderName - The folder name to find.
 * @returns {Object|null} The folder object if found, otherwise null.
 */
function findFolderByName_selector(folderName) {
    var escapedName = escapeFolderName(folderName);
    var folderCollection = $("folder." + escapedName).first();

    if (folderCollection && folderCollection.size() > 0) {
        var folder = folderCollection.get(0);
        log.debug("Found folder (selector): " + folder.name + " (id: " + folder.id + ")");
        return folder;
    } else {
        log.debug("No folder found with name '" + folderName + "' (selector).");
        return null;
    }
}

/**
 * Find all folders with the given name using filter(function).
 * Logs results to the console.
 * 
 * @param {string} folderName - The exact folder name to match.
 * @returns {Collection} JArchi collection of folders matching the name (empty if none).
 */
function findFoldersByName_filter(folderName) {
    var folders = $("folder").filter(function(f) {
        return f.name === folderName;
    });

    if (folders && folders.size() > 0) {
        log.debug("Found " + folders.size() + " folder(s) (filter):");
        folders.each(function(folder) {
            log.debug("  - " + folder.name + " (id: " + folder.id + ")");
        });
    } else {
        log.debug("No folder found with name '" + folderName + "' (filter).");
    }

    return folders;
}

/**
 * Find the first subfolder with the given name under a specified parent folder.
 * Logs the result to the console.
 * 
 * @param {Object} parentFolderObj - JArchi folder object under which to search.
 * @param {string} subFolderName - The name of the subfolder to find.
 * @returns {Object|null} The subfolder object if found, else null.
 */
function findSubFolderByName(parentFolderObj, subFolderName) {
    if (!parentFolderObj) {
        log.debug("Parent folder object is null or undefined.");
        return null;
    }

    var escapedName = escapeFolderName(subFolderName);
    // Get immediate children folders matching the subFolderName selector
    // Use .children("folder.<name>") to find direct subfolders with the name
    var matchingSubFolders = parentFolderObj.children("folder." + escapedName).first();

    if (matchingSubFolders && matchingSubFolders.size() > 0) {
        var subFolder = matchingSubFolders.get(0);
        log.debug("Found subfolder: " + subFolder.name + " (id: " + subFolder.id + ") under parent folder: " + parentFolderObj.name);
        return subFolder;
    } else {
        log.debug("No subfolder named '" + subFolderName + "' found under parent folder: " + parentFolderObj.name);
        return null;
    }
}

/**
 * Find all subfolders with a given name under a specified parent folder name.
 * Logs results to the console.
 * 
 * @param {string} parentFolderName - Name of the parent folder to search within.
 * @param {string} subFolderName - Name of the subfolder(s) to find under the parent.
 * @returns {Collection} JArchi collection of matching subfolders (empty if none).
 */
function findSubfoldersUnderParent(parentFolderName, subFolderName) {
    // Find all parent folders matching parentFolderName
    var parents = $("folder").filter(function(f) {
        return f.name === parentFolderName;
    });

    if (!parents || parents.size() === 0) {
        log.debug("Parent folder '" + parentFolderName + "' not found.");
        return $();  // empty collection
    }

    var matchedSubfolders = $(); // empty collection to accumulate results

    parents.each(function(parent) {
        // Get immediate children of this parent folder that are folders
        var childrenFolders = parent.children("folder");

        // Filter children by subFolderName
        var filtered = childrenFolders.filter(function(f) {
            return f.name === subFolderName;
        });

        // Accumulate matching subfolders
        matchedSubfolders = matchedSubfolders.add(filtered);
    });

    if (matchedSubfolders.size() > 0) {
        log.debug("Found " + matchedSubfolders.size() + " subfolder(s) named '" + subFolderName +
                    "' under parent folder '" + parentFolderName + "':");
        matchedSubfolders.each(function(f) {
            log.debug("  - " + f.name + " (id: " + f.id + ")");
        });
    } else {
        log.debug("No subfolders named '" + subFolderName + "' found under parent folder '" +
                    parentFolderName + "'.");
    }

    return matchedSubfolders;
}

/**
 * Find all subfolders with a given name under a specified parent folder object.
 * Logs results to the console.
 * 
 * @param {Object} parentFolder - JArchi Folder object to search within.
 * @param {string} subFolderName - Name of the subfolder(s) to find under the parent.
 * @returns {Collection} JArchi collection of matching subfolders (empty if none).
 */
function getImmediateChildFolders(parentFolder) {
    if (!parentFolder || parentFolder.type !== "folder") {
        log.debug("Invalid parentFolder provided. It must be a JArchi Folder object.");
        return $();  // empty collection
    }

    var allFolders = $("folder");

    var children = allFolders.filter(function(f) {
        return f.parent != null && f.parent.id === parentFolder.id;
    });

    return children;
}
function findSubfoldersUnderParentObject(parentFolder, subFolderName) {
    if (!parentFolder || parentFolder.type !== "folder") {
        log.debug("Invalid parentFolder provided. It must be a JArchi Folder object.");
        return $();  // empty collection
    }
    
    if (typeof subFolderName !== "string" || subFolderName.trim() === "") {
        log.debug("Invalid subFolderName provided. It must be a non-empty string.");
        return $();  // empty collection
    }

    // Get immediate child folders of the parent folder
    var childrenFolders = getImmediateChildFolders(parentFolder);

    // Filter children by name
    var matchedSubfolders = childrenFolders.filter(function(f) {
        return f.name === subFolderName;
    });

    if (matchedSubfolders.size() > 0) {
        log.debug("Found " + matchedSubfolders.size() + " subfolder(s) named '" + subFolderName +
                    "' under parent folder '" + parentFolder.name + "':");
        matchedSubfolders.each(function(f) {
            log.debug("  - " + f.name + " (id: " + f.id + ")");
        });
    } else {
        log.debug("No subfolders named '" + subFolderName + "' found under parent folder '" +
                    parentFolder.name + "'.");
    }
    log.debug("Found " + matchedSubfolders + " of Type: " + matchedSubfolders.type +" subfolder(s) named '" + subFolderName +
                "' under parent folder '" + parentFolder.name + "':");
    return matchedSubfolders;
}

/**
 * Create a subfolder with the specified name under the given parent folder object.
 * Performs safety checks and logs actions and failures.
 * 
 * @param {Object} parentFolderObj - JArchi Folder object under which to create the subfolder.
 * @param {string} subFolderName - Name of the subfolder to create.
 * @returns {Object|null} The newly created subfolder object, or null if creation failed.
 */
function createSubfolderUnderParent(parentFolderObj, subFolderName) {
    if (!parentFolderObj) {
        log.debug("Error: parentFolderObj is null or undefined. Cannot create subfolder.");
        return null;
    }

    if (typeof subFolderName !== "string" || subFolderName.trim() === "") {
        log.debug("Error: subFolderName must be a non-empty string.");
        return null;
    }

    if (parentFolderObj.type !== "folder") {
        log.debug("Error: The parentFolderObj is not a folder (type = '" + parentFolderObj.type + "').");
        return null;
    }

    // Get all folders in the model
    var allFolders = $("folder");

    // Filter to find existing subfolders with the same name under parentFolderObj
    var existingSubfolders = allFolders.filter(function(f) {
        return f.parent != null && f.parent.id === parentFolderObj.id && f.name === subFolderName;
    });

    if (existingSubfolders && existingSubfolders.size() > 0) {
        log.debug("Subfolder '" + subFolderName + "' already exists under parent folder '" + parentFolderObj.name + "'.");
        return existingSubfolders.get(0);  // Return the existing subfolder object
    }

    try {
        // Create the subfolder under the parent folder
        var newSubfolder = parentFolderObj.createFolder(subFolderName);

        if (newSubfolder && newSubfolder.type === "folder") {
            log.debug("Successfully created subfolder '" + subFolderName + "' under parent folder '" + parentFolderObj.name + "'.");
            return newSubfolder;
        } else {
            log.debug("Failed to create subfolder '" + subFolderName + "'. The returned object is invalid.");
            return null;
        }
    } catch (e) {
        log.debug("Exception while creating subfolder: " + e.message);
        return null;
    }
}

function getOrCreateSubfolder(parentFolder,subfolderName){     
    
    var pf = findFoldersByName_filter(parentFolder).first();
    if(!pf)throw new Error("Could not find parent folder: "+parentFolder);
    else log.info("Found parent folder: "+parentFolder+ " Type: "+pf.type);
    
    log.debug("searching for sub folder: " + subfolderName);
    var subfolder=findSubfoldersUnderParentObject(pf,subfolderName);

    if(subfolder.size()==0){
        log.info("Creating subfolder '"+ subfolderName +"'");
        subfolder=createSubfolderUnderParent(pf, subfolderName);
        if(!subfolder)throw new Error("Could not create subfolder: "+subfolderName);
    }else{
        log.info("Found subfolder '"+ subfolder.first().name + "'");
    }
    return subfolder;
}

/** Load the SheetJS (xlsx) library */
function loadSheetJS(path) {
try {
    return require(path);
} catch (e) {
    throw new Error('Cannot load SheetJS: ' + e);
}
}

/**
 * Read a file into a Base64 string using Java NIO + Base64.
 * @param {string} filePath
 * @returns {string}
 */
function readFileBase64(filePath) {
try {
    const Paths  = Java.type('java.nio.file.Paths');
    const Files  = Java.type('java.nio.file.Files');
    const Base64 = Java.type('java.util.Base64');
    const bytes = Files.readAllBytes(Paths.get(filePath));
    const encoded = Base64.getEncoder().encodeToString(bytes);
    log.debug('readFileBase64: ' + bytes.length + ' bytes → ' + encoded.length + ' chars');
    return encoded;
} catch (e) {
    console.log.error('readFileBase64 failed: ' + e);
    throw new Error('Cannot read file: ' + e);
}
}

/** Ensure all required headers exist in the sheet */
function validateColumns(colIdxFn, required) {
required.forEach(c => {
    if (colIdxFn(c) < 0) {
    throw new Error('Missing required column "' + c + '"');
    }
});
}

/**
 * Checks which ArchiMate view(s) contain the given element by scanning each view’s diagram objects.
 * Uses view.find() to retrieve all visual objects in each view and matches on .concept.id
 * @param {EObjectProxy} elem
 * @returns {string|string[]} view name, array of names, or "Orphan"
 *
 * Each visual object (.find()) has a .concept property linking back to the model element fileciteturn4file17.
 */
function getElementViews(elem) {
const viewNames = [];
// Iterate all views in the model
const allViews = toJsArray($('view').toArray());
allViews.forEach(view => {
    // Retrieve all visual objects in this view
    const allObjects = toJsArray($(view).find().toArray());
    // Check if any object represents our element
    for (let obj of allObjects) {
    if (obj.concept && obj.concept.id === elem.id) {
        viewNames.push(view.name);
        break;
    }
    }
});
log.debug('getElementViews(' + elem.id + '): ' + viewNames);
if (!viewNames.length) return 'Orphan';
return viewNames.length === 1 ? viewNames[0] : viewNames;
}

/**
 * Get values of custom properties for an element.
 * @param {Object} el
 * @param {Array<string>} keys
 * @returns {Array<any>}
 */
function collectPropValues(el, keys) {
const props = el.properties ? el.properties() : {};
return keys.map(k => props.hasOwnProperty(k) ? el.prop(k) : '');
}

/** Flatten an array into a semicolon-delimited string, or pass through. */
function formatForCSV(v) {
return Array.isArray(v) ? v.join(';') : v;
}

/**
 * buildProperties
 * Generic property and metadata extractor for ArchiMate model elements.
 *
 * @param {EObjectProxy|null} el - The model element (null for orphan).
 * @param {Array<string>} modelProperties - List of ArchiMate property names to extract via .prop().
 * @param {Array<Object>} supplementProperties - List of {key, fn} computed property configs.
 * @param {Object} ctx - Context object providing helpers and extra data for property functions.
 * @param {Object} [logger] - Logger object with .info()/.log.warn() (defaults to console).
 * @returns {Object} rec - The assembled property record.
 */
function buildProperties(el, modelProperties, supplementProperties, ctx) {
    let rec = {};    

    if (el) {
        log.debug("Building properties for: " + (el.name || el.id));
        // Extract plain model properties
        modelProperties.forEach(function(propName) {
            let value = el.prop(propName);
            rec[propName] = (typeof value !== 'undefined' && value !== null) ? value : '';
        });
        // Extract computed supplement properties
        supplementProperties.forEach(function(field) {
            try {
                rec[field.key] = field.fn(el, ctx);
            } catch (err) {
                log.warn("Error building supplement property [" + field.key + "]: " + err);
                rec[field.key] = '';
            }
        });
    } else {
        log.warn("Element is null/undefined (Orphan record).");
        modelProperties.forEach(function(propName) {
            rec[propName] = '';
        });
        supplementProperties.forEach(function(field) {
            try {
                rec[field.key] = field.fn(null, ctx);
            } catch (err) {
                rec[field.key] = '';
            }
        });
    }
    return rec;
}

/**
 * Assigns a UUID to each row based on uniqueness of columns in uuidCols.
 * If the combination of values in uuidCols is unique among previous rows, generate a new UUID;
 * otherwise, reuse the existing UUID for that combination.
 *
 * @param {Array<Object>} records   - Array of record objects (one per CSV row).
 * @param {Array<string>} uuidCols  - List of column names to form the uniqueness key.
 * @param {string} [uuidField='_id']- Field name to store UUID (default '_id').
 * @returns {Array<Object>}         - Records with UUID field filled.
 */
function assignRowUUIDs(records, uuidCols, uuidField) {
    log.debug(` Using following columns to generate UUIDs: ${uuidCols.join(', ')}`);
    uuidField = uuidField || 'uid';
    // Use a Map to track unique combinations
    const comboToUuid = {};
    records.forEach(rec => {
        // Build unique key from configured columns (joined by '||' to avoid accidental col-value collision)
        const comboKey = uuidCols.map(col => (rec[col] || '')).join('||');
        if (comboKey in comboToUuid) {
            rec[uuidField] = comboToUuid[comboKey];
        } else {
            // Generate a new UUID (using jArchi's $.uuid() or fallback)
            let uuid = ($ && $.uuid) ? $.uuid() : generateJsUUID();
            comboToUuid[comboKey] = uuid;
            rec[uuidField] = uuid;
        }
    });
    return records;
}

// Basic JS UUID generator for fallback (RFC4122 v4-like, not cryptographically strong)
function generateJsUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

/**
 * Merges properties from source object into target object, but only for keys present in propKeys.
 * Existing values in target take priority unless overwrite=true.
 * 
 * @param {Object} target    - The main record object.
 * @param {Object} source    - The dynamic properties to merge in.
 * @param {Array}  propKeys  - List of allowed keys.
 * @param {boolean} [overwrite=false] - If true, always overwrite.
 * @returns {Object} The merged object.
 */
function mergeDynamicProps(target, source, propKeys, overwrite) {
    overwrite = overwrite || false;
    Object.keys(source).forEach(key => {
        if (propKeys.includes(key)) {
            if (overwrite || !(key in target) || target[key] === '') {
                target[key] = source[key];
            }
        }
    });
    return target;
}

/**
 * Builds a matrix of relationships for a given list of concepts.
 * Uses jArchi's inRels()/outRels() to fetch incoming or outgoing relationships.
 *
 * @param {ArchiConcept[]} concepts – Array of concept elements to process.
 * @param {'in'|'out'} direction – 'out' to list outgoing, 'in' to list incoming relationships.
 * @returns {string[][]} A 2D array: first row = headers, subsequent rows = relationship data.
 */
function conceptRelationshipMap(concepts, direction) {
  log.info('[ConceptRelationshipMap] Building concept-relationship map...');

  const headers = [
    'Source Name', 'Source Type', 'Source ID',
    'Relationship Type', 'Relationship ID',
    'Target Name', 'Target Type', 'Target ID'
  ];
  const rows = [ headers ];

  // Validate inputs
  if (!Array.isArray(concepts) || concepts.length === 0) {
    log.error('[ConceptRelationshipMap] Input concepts array is empty or invalid!');
    return rows;
  }
  if (direction !== 'in' && direction !== 'out') {
    log.error(`[ConceptRelationshipMap] Invalid direction: ${direction}. Must be "in" or "out".`);
    return rows;
  }
  log.info(`[ConceptRelationshipMap] Processing ${concepts.length} concepts, direction="${direction}".`);

  // Counters for diagnostics
  let validConceptCount      = 0;
  let conceptsWithRels       = 0;
  let totalRels              = 0;
  let relNoEndpointCount     = 0;
  let relValidCount          = 0;

  try {
    concepts.forEach((concept, idx) => {
      if (!concept) {
        log.error(`[ConceptRelationshipMap] Concept at index ${idx} is null/undefined, skipping.`);
        return;
      }
      validConceptCount++;

      // Fetch relationships via jArchi helper
      const rels = direction === 'out'
        ? $(concept).outRels().toArray()
        : $(concept).inRels().toArray();

      if (rels.length === 0) {
        log.debug(`[ConceptRelationshipMap] Concept "${concept.name}" (${concept.id}) has no ${direction} relationships.`);
        return;
      }

      conceptsWithRels++;
      totalRels += rels.length;

      rels.forEach((rel, relIdx) => {
        // Determine source/target based on direction
        const src = direction === 'out' ? concept : rel.source;
        const tgt = direction === 'out' ? rel.target : concept;

        if (!src || !tgt) {
          relNoEndpointCount++;
          log.error(
            `[ConceptRelationshipMap] Relationship ID "${rel.id}" missing ${
              !src ? 'source' : 'target'
            } (concept index ${idx}, rel index ${relIdx}).`
          );
          return;
        }

        relValidCount++;
        rows.push([
          src.name || '',
          src.type || '',
          src.id   || '',
          rel.type || '',
          rel.id   || '',
          tgt.name || '',
          tgt.type || '',
          tgt.id   || ''
        ]);
      });
    });
  }
  catch (err) {
    log.error(`[ConceptRelationshipMap] Unexpected error: ${err}`);
    return rows;
  }

  // Detailed debug summary
  
    log.debug(`[ConceptRelationshipMap] Valid concepts: ${validConceptCount} / ${concepts.length}`);
    log.debug(`[ConceptRelationshipMap] Concepts with relationships: ${conceptsWithRels}`);
    log.debug(`[ConceptRelationshipMap] Total relationships encountered: ${totalRels}`);
    log.debug(`[ConceptRelationshipMap] Relationships mapped with valid endpoints: ${relValidCount}`);
    log.debug(`[ConceptRelationshipMap] Relationships missing endpoint(s): ${relNoEndpointCount}`);
    log.debug(`[ConceptRelationshipMap] Final row count (excluding header): ${rows.length - 1}`);


  return rows;
}

/**
 * Ensures a file path has the given extension (e.g., .xlsx)
 * @param {string} path 
 * @param {string} ext - e.g. ".xlsx"
 * @returns {string}
 */
function ensureFileExtension(path, ext) {
    if (!path.toLowerCase().endsWith(ext.toLowerCase())) {
        return path + ext;
    }
    return path;
}

/**
 * Exports a 2D array (rows) to Excel using MyExcel (with JSZip).
 * @param {Array[]} rows - 2D array: first row = headers, each following = data.
 * @param {string} [sheetName='Sheet1'] - Sheet name for the Excel file.
 * @param {string} [promptTitle='Save Excel File'] - Title for the save prompt.
 */
function exportToExcel(rows, sheetName, promptTitle) {
    log.info('[exportToExcelMyExcel] Starting export...');
    try {
        if (!rows || rows.length <= 1) {
            log.error('[exportToExcelMyExcel] No data to export (empty or only headers).');
            window.alert('Nothing to export!');
            return;
        }
        // Prompt user for file
        var defaultFileName = (typeof model !== 'undefined' && model.name ? model.name : 'Exported') + '.xlsx';
        var excelPath = window.promptSaveFile({
            title: promptTitle || "Export to Excel",
            filterExtensions: ["*.xlsx"],
            fileName: defaultFileName
        });

        if (!excelPath) {
            log.info('[exportToExcelMyExcel] User canceled Excel file selection.');
            return;
        }

        // Load MyExcel and JSZip (must be in script directory)
        load(__DIR__ + "jszip-101.js");
        load(__DIR__ + "myexcel.js");

        // Create Excel file
        var excel = $JExcel.new("Calibri 12 #333333");

        // Add new sheet and set headers (first row)
        var sheetIdx = 0;
        excel.set({ sheet: sheetIdx, value: sheetName || "Sheet1" });

        // Header style
        var formatHeader = excel.addStyle({
            fill: "#dddddd",
            border: "thin, thin, thin, thin #555555",
            font: "Arial 12 #000000 B",
        });

        // Set headers
        for (var i = 0; i < rows[0].length; i++) {
            excel.set(sheetIdx, i, 0, rows[0][i], formatHeader);
            excel.set(sheetIdx, i, undefined, "auto"); // column width auto
        }

        // Set data rows
        for (var row = 1; row < rows.length; row++) {
            for (var col = 0; col < rows[row].length; col++) {
                excel.set(sheetIdx, col, row, rows[row][col]);
            }
        }

        // Generate and write file
        excel.generate(excelPath);
        log.info('[exportToExcelMyExcel] Successfully exported Excel file: ' + excelPath);
        window.alert('Export complete: ' + excelPath);
    } catch (err) {
        log.error('[exportToExcelMyExcel] Error: ' + err);
        window.alert('Export failed: ' + (err && err.message ? err.message : err));
    }
}

/**
 * Check if a folder exists and is writable.
 * Logs diagnostics and returns true if folder exists and is writable, else false.
 * @param {string} folderPath - Absolute path to the folder (native format, e.g. C:\Users\me\Documents)
 * @returns {boolean}
 */
function checkFolderWritable(folderPath) {
    log.info('[checkFolderWritable] Checking folder: ' + folderPath);
    try {
        var File = Java.type('java.io.File');
        var folder = new File(folderPath);
        if (!folder.exists()) {
            log.error('[checkFolderWritable] Folder does not exist: ' + folderPath);
            return false;
        }
        if (!folder.isDirectory()) {
            log.error('[checkFolderWritable] Path is not a directory: ' + folderPath);
            return false;
        }
        if (!folder.canWrite()) {
            log.error('[checkFolderWritable] No write permission for: ' + folderPath);
            return false;
        }
        log.info('[checkFolderWritable] Folder exists and is writable.');
        return true;
    } catch (ex) {
        logJavaException('[checkFolderWritable] Exception:', ex);
        return false;
    }
}

/**
 * Log a Java exception with full stack trace.
 * @param {string} contextMsg - Message for log context.
 * @param {Error|JavaException} exception - The thrown exception.
 */
function logJavaException(contextMsg, exception) {
    try {
        log.error(contextMsg + ' ' + exception);
        // If Java exception, print stack trace
        if (exception && typeof exception.printStackTrace === 'function') {
            var baos = new (Java.type('java.io.ByteArrayOutputStream'))();
            var ps = new (Java.type('java.io.PrintStream'))(baos);
            exception.printStackTrace(ps);
            ps.close();
            var trace = baos.toString();
            log.error('[StackTrace]\n' + trace);
        }
        // jArchi sometimes wraps Java exceptions as JS objects with .cause or .stack
        if (exception && exception.stack) {
            log.error('[JavaScript Stack]\n' + exception.stack);
        }
        if (exception && exception.cause) {
            log.error('[Cause] ' + exception.cause);
        }
    } catch (e) {
        log.error('[logJavaException] Logging failed: ' + e);
    }
}

/**
 * Given a file path, returns the parent folder path.
 * @param {string} filePath
 * @returns {string} Parent directory path
 */
function getParentFolderPath(filePath) {
    var File = Java.type('java.io.File');
    var file = new File(filePath);
    return file.getParent();
}


module.exports = { 
    assignRowUUIDs,
    buildCsvLine,    
    buildHeader,    
    buildProperties,    
    collectPropValues,
    conceptRelationshipMap,
    createSubfolderUnderParent,
    escapeFolderName,
    escapeString,
    exportToExcel,
    findFolderByName_selector,
    findFoldersByName_filter,
    findSubFolderByName,
    findSubfoldersUnderParent,
    findSubfoldersUnderParentObject,
    formatForCSV,
    generateJsUUID,
    getActiveModel,
    getElementViews,
    getImmediateChildFolders,
    getOrCreateSubfolder,
    getParentFolderPath,
    getRootFolders,
    getRowValue,
    getSubfolders,
    loadSheetJS,    
    mergeDynamicProps,
    normalize,
    normalizeFolderName,
    promptForFile,
    readCSV,
    readFileBase64,
    toJsArray,   
    unescapeString,
    validateColumns,
    writeCsv,
};

