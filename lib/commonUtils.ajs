/**
 * common-utils.ajs
 * Common utility functions for jArchi scripts.
 *
 * Dependencies:
 *   - Console API (console.clear/show/log/error)
 *   - Java interoperability for File I/O and list conversion.
 */

// #region Load Dependencies
// Load shared libraries
  const libPath = __DIR__ ;  
  const envPath = __DIR__+"../.env";
  console.log("envPath: " + envPath); 
  const loadEnv = load(libPath + 'loadEnv.ajs').loadEnv(envPath);
  const { log } = load(libPath + 'logger.ajs'); 
  const XLSX   = require(libPath + 'xlsx.full.min.js');
// #endregion Load Dependencies

// #region Configuration
var CONFIG = {
    debug: true,
    escapeMap: {
        "#comma#": ",",
        "#squote#": "'",
        "#dquote#": '"',
        "#tab#": "\t",
        "#linebreak#": "\n"
    },
};

// #endregion Configuration

// #region Utility Functions
/**
 * Convert a Java list or array-like to a native JS array.
 * @param {JavaList|Array} list
 * @returns {any[]} Native JS array.
 */
function toJsArray(list) {
    if (list == null) throw new Error('toJsArray(): input is null or undefined');
    return Array.isArray(list) ? list : Java.from(list);
}

/**
 * Normalize a string for case/whitespace-insensitive matching.
 * @param {string} input
 * @returns {string}
 */
function normalize(input) {
    return input.toString().replace(/\s+/g, ' ').trim().toLowerCase();
}

/**
 * Escape all special characters in `input` by replacing them
 * with their corresponding tokens from CONFIG.escapeMap.
 *
 * @param {string} input
 * @returns {string} The escaped string.
 */
function escapeString(input) {
  if (typeof input !== "string") {
    return input;
  }

  let result = input;
  // For each token ‚Üí char mapping, replace char with token
  Object.entries(CONFIG.escapeMap).forEach(([token, char]) => {
    // Split/join avoids regex pitfalls with control chars
    result = result.split(char).join(token);
  });

  return result;
}

/**
 * Un‚Äêescape all tokens in `input` by replacing them
 * with their corresponding characters from CONFIG.escapeMap.
 *
 * @param {string} input
 * @returns {string} The unescaped string.
 */
function unescapeString(input) {
  if (typeof input !== "string") {
    return input;
  }

  let result = input;
  // For each token ‚Üí char mapping, replace token with char
  Object.entries(CONFIG.escapeMap).forEach(([token, char]) => {
    result = result.split(token).join(char);
  });

  return result;
}

/**
 * Escape folder names containing special characters or spaces for use in selector.
 * Wraps names with quotes and escapes embedded quotes.
 * 
 * @param {string} name
 * @returns {string} escaped name suitable for JArchi selector
 */
function escapeFolderName(name) {
    var escaped = name.replace(/"/g, '\\"');
    return '"' + escaped + '"';
}

/**
 * Normalizes a folder name by stripping all non-alphanumeric characters.
 * @param {string} name
 * @returns {string} Normalized folder name
 */
function normalizeFolderName(name) {
    if (!name) return "";
    return String(name).replace(/[^a-zA-Z0-9]/g, "");
}

/**
 * Assigns a UUID to each row based on uniqueness of columns in uuidCols.
 * If the combination of values in uuidCols is unique among previous rows, generate a new UUID;
 * otherwise, reuse the existing UUID for that combination.
 *
 * @param {Array<Object>} records   - Array of record objects (one per CSV row).
 * @param {Array<string>} uuidCols  - List of column names to form the uniqueness key.
 * @param {string} [uuidField='_id']- Field name to store UUID (default '_id').
 * @returns {Array<Object>}         - Records with UUID field filled.
 */
function assignRowUUIDs(records, uuidCols, uuidField) {
    log.debug(` Using following columns to generate UUIDs: ${uuidCols.join(', ')}`);
    uuidField = uuidField || 'uid';
    // Use a Map to track unique combinations
    const comboToUuid = {};
    records.forEach(rec => {
        // Build unique key from configured columns (joined by '||' to avoid accidental col-value collision)
        const comboKey = uuidCols.map(col => (rec[col] || '')).join('||');
        if (comboKey in comboToUuid) {
            rec[uuidField] = comboToUuid[comboKey];
        } else {
            // Generate a new UUID (using jArchi's $.uuid() or fallback)
            let uuid = ($ && $.uuid) ? $.uuid() : generateJsUUID();
            comboToUuid[comboKey] = uuid;
            rec[uuidField] = uuid;
        }
    });
    return records;
}

// Basic JS UUID generator for fallback (RFC4122 v4-like, not cryptographically strong)
function generateJsUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

/**
 * Log a Java exception with full stack trace.
 * @param {string} contextMsg - Message for log context.
 * @param {Error|JavaException} exception - The thrown exception.
 */
function logJavaException(contextMsg, exception) {
    try {
        log.error(contextMsg + ' ' + exception);
        // If Java exception, print stack trace
        if (exception && typeof exception.printStackTrace === 'function') {
            var baos = new (Java.type('java.io.ByteArrayOutputStream'))();
            var ps = new (Java.type('java.io.PrintStream'))(baos);
            exception.printStackTrace(ps);
            ps.close();
            var trace = baos.toString();
            log.error('[StackTrace]\n' + trace);
        }
        // jArchi sometimes wraps Java exceptions as JS objects with .cause or .stack
        if (exception && exception.stack) {
            log.error('[JavaScript Stack]\n' + exception.stack);
        }
        if (exception && exception.cause) {
            log.error('[Cause] ' + exception.cause);
        }
    } catch (e) {
        log.error('[logJavaException] Logging failed: ' + e);
    }
}

/**
 * Perform an Excel‚Äêstyle lookup (XLOOKUP) across a JS data set and append results.
 *
 * @param {Object|Array<Object>} dataObj
 *   Your source data, either as an array of row‚Äêobjects or an object mapping keys to row‚Äêobjects.
 * @param {string} lookupField
 *   The field whose value to look up in the data (the ‚ÄúXLOOKUP‚Äù lookup_value).
 * @param {string} matchField
 *   The field to match against when searching (the lookup_array).
 * @param {string} returnField
 *   The field whose value to return when a match is found (the return_array).
 * @param {string} outputField
 *   The name of the new field to write the lookup result into on each record.
 * @param {Object} [opts]
 * @param {any}    [opts.defaultValue=""] 
 *        Value to assign if no match is found.
 *
 * @returns {Object|Array<Object>}
 *   The same data structure you passed in, but with `outputField` added to each record.
 *
 * @example
 *   // Adds a ‚ÄúManagerName‚Äù column to each record by looking up EmployeeID ‚Üí ManagerName  
 *   data = lookupAndExtend(
 *     data, 
 *     'EmployeeID',         // lookup_field
 *     'EmployeeID',         // match_array field
 *     'ManagerName',        // return_array field
 *     'ManagerName',        // new column
 *     { defaultValue: null }
 *   );
 */
function lookupAndExtend(
  dataObj,
  lookupField,
  matchField,
  returnField,
  outputField,
  opts = {}
) {
  const defaultValue = opts.defaultValue != null ? opts.defaultValue : "";

  log.info(
    `üîç lookupAndExtend: lookup="${lookupField}", match="${matchField}", ` +
    `return="${returnField}", output="${outputField}", default="${defaultValue}"`
  );

  // Normalize to array for indexing
  const rows = Array.isArray(dataObj)
    ? dataObj
    : Object.values(dataObj);

  // Build index: normalized(matchValue) ‚Üí returnValue
  const index = {};
  rows.forEach((rec, i) => {
    let key = rec[matchField];
    if (key == null) return;
    key = String(key).trim().toLowerCase();
    index[key] = rec[returnField];
  });
  log.info(`‚úÖ Built lookup index with ${Object.keys(index).length} entries`);

  // Extend each record
  rows.forEach((rec, i) => {
    const raw = rec[lookupField];
    if (raw == null) {
      log.warn(`Row ${i+1}: no "${lookupField}", defaulting to "${defaultValue}"`);
      rec[outputField] = defaultValue;
      return;
    }
    const norm = String(raw).trim().toLowerCase();
    const found = index.hasOwnProperty(norm) ? index[norm] : defaultValue;
    log.debug(
      `Row ${i+1}: lookup="${raw}"‚Üí"${norm}" ‚Üí ` +
      (found === defaultValue
        ? `no match (default="${defaultValue}")`
        : `matched="${found}"`)
    );
    rec[outputField] = found;
  });

  log.info(`üèÅ lookupAndExtend complete (${rows.length} records)`);

  // Return in same shape
  if (Array.isArray(dataObj)) {
    return rows;
  } else {
    return rows.reduce((acc, rec) => {
      // Re-use the lookupField‚Äôs raw value as the key, or fallback to index
      const key = rec[lookupField] != null
        ? String(rec[lookupField]).trim()
        : JSON.stringify(rec);
      acc[key] = rec;
      return acc;
    }, {});
  }
}

/**
   * Wrap a function call in try/catch, log on error, return null.
   * @param {Function} fn
   * @param {string} name
   */
  function safe(fn, name) {
    try {
      return fn();
    }
    catch(err) {
      log.error(`[SAFE:${name}] ${err}`);
      return null;
    }
  }

// #endregion Utility Functions

// #region Export
// Finally, export it alongside existing utilities
module.exports = Object.assign(module.exports || {}, {
    lookupAndExtend,
    assignRowUUIDs,   
    escapeFolderName,
    escapeString,   
    generateJsUUID,  
    normalize,
    normalizeFolderName,   
    toJsArray,   
    unescapeString,  
    safe
});

// #endregion Export

