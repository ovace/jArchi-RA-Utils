/**
 * loadEnv.ajs  –  Tiny .env parser for jArchi
 * Exports:
 *   global.loadEnv(path)
 *   module.exports.loadEnv(path)            (require)
 *   load(__DIR__ + 'loadEnv.ajs').loadEnv   (load)
 */

var loadEnvExport = (function (global) {
    'use strict';

    var Files = java.nio.file.Files;
    var Paths = java.nio.file.Paths;
    var UTF8  = java.nio.charset.StandardCharsets.UTF_8;

    function loadEnv(filePath) {
        var path = Paths.get(filePath).toAbsolutePath();
       
        if (!Files.exists(path)) throw new Error(".env not found: " + path);

        var env = {};
        String(new java.lang.String(Files.readAllBytes(path), UTF8))
            .split(/\r?\n/)
            .forEach(function (line) {
                line = line.trim();
                if (!line || line.startsWith('#')) return;
                var eq = line.indexOf('=');
                if (eq < 0) return;

                var key = line.substring(0, eq).trim();
                var val = line.substring(eq + 1).trim();
                env[key] = val;

                if (java.lang.System.getenv(key) == null &&
                    java.lang.System.getProperty(key) == null) {
                    java.lang.System.setProperty(key, val);
                }
            });
        return env;
    }

    /* -- make accessible in all styles -- */
    global.loadEnv = loadEnv;                 // plain load("…")
    return { loadEnv: loadEnv };              // ← IIFE *returns* this
})(this);

/* -- CommonJS style -- */
if (typeof module !== 'undefined' && module.exports !== undefined) {
    module.exports = loadEnvExport;
}

/*  FINAL expression: makes load() return {loadEnv}  */
loadEnvExport;
