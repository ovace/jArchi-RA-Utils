// data_utils.ajs

/**
 * data_utils.ajs
 *
 * A shared library of spreadsheet and transformation functions.
 */

// Load shared libraries
  const libPath = __DIR__ ;  
  const envPath = __DIR__+"../.env";
  console.log("envPath: " + envPath); 
  const loadEnv = require(libPath + 'loadEnv.ajs').loadEnv(envPath);
  const { log } = require(libPath + 'logger.ajs'); 

function normalizeHeatmapValue(value, thresholds) {
    if (value == null || isNaN(value)) return "unknown";
    if (value < thresholds.low) return "low";
    if (value < thresholds.medium) return "medium";
    return "high";
}
function parseNumericCell(raw) {
    if (typeof raw === 'string') {
        let cleaned = raw.replace(/[^0-9\.\-]/g, '');
        let num = parseFloat(cleaned);
        return isNaN(num) ? null : num;
    }
    if (typeof raw === 'number') return raw;
    return null;
}
function mapHeader(header, headerMap) {
    return headerMap[header] || null;
}

/**
 * Check if a value is a plain object.
 * @param {*} val
 * @returns {boolean}
 */
function isObject(val) {
  return val !== null && typeof val === 'object' && !Array.isArray(val);
}

/**
 * Normalize strings for comparison (e.g., lowercased, trimmed).
 * @param {string} str
 * @returns {string}
 */
function normalize(str) {
  return (str || '').toString().toLowerCase().replace(/\s+/g, ' ').trim();
}

/**
 * Merge properties from `source` into `target` for each key in `keys`.
 * If `force` is true, always overwrite target if source has non-empty value.
 *
 * @param {Object} target
 * @param {Object} source
 * @param {string[]} keys
 * @param {boolean} [force=false]
 */
function mergeDynamicProps(target, source, keys, force = false) {
  keys.forEach(k => {
    const val = (source[k] || '').toString().trim();
    if (val !== '') {
      if (force || !target[k]) target[k] = val;
    }
  });
}

/**
 * Convert raw spreadsheet data to normalized row records.
 *
 * This supports:
 * - array of arrays (e.g. sheet_to_json(header:1))
 * - array of objects (e.g. sheet_to_json(header:<headers>))
 * - single row object
 *
 * Each output record will be of the form:
 *   { row: <original row>, sheetRow: <1-based index in sheet> }
 *
 * @param {Array|Object} data
 * @param {Object} [opts]
 * @param {number} [opts.dropRows=2] - number of leading rows to skip (e.g. title + header)
 * @param {number} [opts.preview=3]  - number of rows to log as preview
 * @returns {{row: Object|Array, sheetRow: number}[]} normalized records
 *
 * @throws {TypeError} if data is not an array or object
 */
function data2Records(data, opts) {
  const { dropRows = 2, preview = 3 } = opts || {};
  log.debug(`data2Records(): typeof=${typeof data} dropRows=${dropRows} preview=${preview}`);

  let normalized;

  if (Array.isArray(data)) {
    if (data.length > 0 && isObject(data[0])) {
      // Array of objects
      normalized = data.map((row, idx) => ({
        row,
        sheetRow: idx + 1
      }));
    } else {
      // Array of arrays
      normalized = data.slice(dropRows).map((r, i) => ({
        row: r,
        sheetRow: i + dropRows + 1
      }));
    }
  } else if (isObject(data)) {
    normalized = [{ row: data, sheetRow: 1 }];
  } else {
    throw new TypeError(`data2Records(): unsupported input type '${typeof data}'`);
  }

  // log preview
  const sample = normalized.slice(0, preview);
  log.debug(
    'data2Records() preview:\n' +
    sample.map((rec, i) =>
      `#${i} (sheetRow=${rec.sheetRow}): ${JSON.stringify(rec.row, null, 2)}`
    ).join('\n\n')
  );

  return normalized;
}

module.exports = {
  normalizeHeatmapValue,
  parseNumericCell,
  mapHeader,
  isObject,
  normalize,
  mergeDynamicProps,
  data2Records
};
