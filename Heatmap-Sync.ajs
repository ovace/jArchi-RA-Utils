/*
 * Heatmap-Sync Enhanced (Modularized, Fully Documented, with Header Fallback,
 * Progress Reporting, Grouping Extraction, View-Membership, and Blank-Row Filtering)
 * Heatmap-Sync Enhanced (Modularized, Fully Documented, with View-Membership and Robust CSV Helpers)
 */

(function() {
  // Initialize console
  console.clear();
  console.show();

  // Load shared libraries
  const libPath = __DIR__ + 'lib\\';
  const utils  = require(libPath + 'common_utils.ajs');
  const logger = require(libPath + 'logger.ajs');
  const XLSX   = require(libPath + 'xlsx.full.min.js');

  const { 
    assignRowUUIDs,
    buildCsvLine,   
    buildHeader,
    buildProperties,
    collectColumnValues,
    collectPropValues,
    createSubfolderUnderParent,
    escapeFolderName,
    escapeString,
    findFolderByName_selector,
    findFoldersByName_filter,
    findSubFolderByName,
    findSubfoldersUnderParent,
    findSubfoldersUnderParentObject,
    formatForCSV,
    getActiveModel,
    getElementViews,
    getImmediateChildFolders,
    getOrCreateSubfolder,
    getRootFolders,
    getRowValue,
    getSubfolders,
    loadSheetJS,
    normalize,
    normalizeFolderName,
    promptForFile,
    readCSV,
    readFileBase64,
    toJsArray,    
    unescapeString,
    validateColumns,
    writeCsv,
  } = utils;

  const { log, 
          debug, 
          warn, 
          error 
        } = logger;

  // Configuration  

  /** @typedef {{
   *    sheetName: string,
   *    excelFilters: Array<Object>,
   *    csvFilters: Array<Object>,
   *    sheetjsPath: string,
   *    requiredColumns: string[],
   *    baseOutputCols: string[],
   *    flagCols: string[],
   *    extraCols: string[],
   *    relationshipTypes: string[],
   *    levelMap: Object<string,{col:string}>,
   *    debug: boolean
   * }} Config
   */
  const config = {
    debug: false,
    sheetjsPath:  __DIR__ + '/lib/xlsx.full.min.js',
    
    heatMapFilePromptTitle: 'Select Heatmap Excel Workbook',
    excelFilters: [{ name: 'Excel Workbook', extensions: ['xlsm','xlsx'] }],
    sheetName: 'Function-HeatMap-Final',

    csvFilePromptTitle:   'Select Heatmap CSV File',
    csvFilters:   [{ name: 'CSV File',      extensions: ['csv'] }],
    
    requiredColumns: ['_id','ABB Name','Functional composition','Description','Pri Domain'],
    baseOutputCols:  ['_id','ABB Name','Functional composition','Description','Pri Domain'],
    flagCols:        ['Taxonomy Classification','Level','nameMatch','descMatch','modelOnly'],
    extraCols:       ['ID','Type','Grouped_under','inView'],
    relationshipTypes: [
      'association-relationship',
      'aggregation-relationship',
      'composition-relationship'
    ],
    modelProperties: [
      'Level',
      'Taxonomy Classification',
      'Version',
      'Owner',
      'Name',
      'StandardSolutionExample',
      'ExampleUse',
      'Type',
    ],
    uuidCols: [
      'Pri Domain',
      'Functional composition',
      'ABB Name'      
    ],
    /**
     * supplementProperties: List of computed or derived properties for export/metadata.
     * Each entry provides a key (column name) and a function taking (el, ctx).
     */
    supplementProperties : [
        {
            key: "ID",
            fn: function(el) { return el && el.id ? el.id : ""; }
        },
        {
            key: "Grouped_under",
            fn: function(el, ctx) { return el ? ctx.getGrouping(el, ctx.relTypeIds) : ""; }
        },
        {
            key: "inView",
            fn: function(el, ctx) { return el ? ctx.getElementViews(el) : "Orphan"; }
        }
        // Add further computed fields here as needed
    ],
    levelMap: {
      '0': { col: 'ABB Name' },
      '1': { col: 'ABB Name' },
      '2': { col: 'Functional composition' }
    },    
    // CSV Options
    delimiter: ',',
    newline: '\n',
    escapeFormulae: true  
  };

  const relTypeIds = config.relationshipTypes;
  
  /**
   * Determine grouping for an element via configured relationship types.
   * @param {Object} element â€“ Archi element proxy
   * @param {string[]} relTypes
   * @returns {string} grouping name, relationship type, or ''
   */
  function getGrouping(element, relTypes) {
    if (config.debug) debug('[DEBUG] getGrouping() for ' + element.id + '/' + element.name);
    for (let type of relTypes) {
      const ofType   = $('relationship').filter(r => r.type.toLowerCase() === type).toArray();
      const relevant = ofType.filter(r => r.source.id === element.id || r.target.id === element.id);
      if (config.debug) debug('[DEBUG] - type=' + type + ', total=' + ofType.length + ', relevant=' + relevant.length);
      if (relevant.length) {
        for (let r of relevant) {
          const other = (r.source.id === element.id ? r.target : r.source);
          if (other.type.toLowerCase() === 'grouping') {
            if (config.debug) debug('[DEBUG] - grouping found: ' + other.name);
            return other.name;
          }
        }
        if (config.debug) debug('[DEBUG] - no grouping element; return type ' + type);
        return type;
      }
    }
    return '';
  }

  /**
 * Process sheet rows into CSV, including all modelProperties and supplementProperties for matched elements.
 * Uses buildProperties() for model element data injection.
 */
  function processSpreadsheetRows(rows, colIdxFn, matchedIds, propKeys) {
      const dataRows = rows.slice(2).map((r, i) => ({ row: r, sheetRow: i + 2 }));
      log('Processing ' + dataRows.length + ' spreadsheet rows...');

      let frag = buildHeader(propKeys) + '\n';

      const ctx = {
          getGrouping: getGrouping,
          getElementViews: getElementViews,
          relTypeIds: relTypeIds
      };

      dataRows.forEach((entry, idx) => {
          log(' [' + (idx + 1) + '/' + dataRows.length + '] Sheet row ' + entry.sheetRow);

          const fc = normalize(entry.row[colIdxFn('Functional composition')] || '');
          const el = $('element').filter(e => normalize(e.name) === fc).first();

          // Prepare a merged record, initialize all columns as empty string
          let rec = {};
          propKeys.forEach(col => { rec[col] = ''; });

          // 1. Base columns: spreadsheet always takes precedence for these
          config.baseOutputCols.forEach(col => {
              rec[col] = entry.row[colIdxFn(col)] || '';
          });

          // 2. Matching logic/flags
          let nameMatch = '0', descMatch = '0', modelOnlyFlag = '0';
          if (el) {
              nameMatch = '1';
              const docNorm = normalize(el.documentation || '');
              const descNorm = normalize(entry.row[colIdxFn('Description')] || '');
              if (docNorm === descNorm) descMatch = '1';
              matchedIds[el.id] = true;
          }
          rec['nameMatch'] = nameMatch;
          rec['descMatch'] = descMatch;
          rec['modelOnly'] = modelOnlyFlag;

          // 3. If model element is found, inject modelProperties & supplementProperties
          if (el) {
              // Use buildProperties for all element-related fields
              const modelRec = buildProperties(
                  el,
                  config.modelProperties,
                  config.supplementProperties,
                  ctx
              );
              // Assign every property from modelRec to rec, as long as it's in propKeys
              Object.keys(modelRec).forEach(key => {
                  if (propKeys.includes(key)) rec[key] = modelRec[key];
              });
          } else {
              // For orphans: optional "Orphan" for inView, rest remain ''
              config.supplementProperties.forEach(supp => {
                  if (supp.key === 'inView') rec[supp.key] = 'Orphan';
              });
          }

          // 4. Ensure spreadsheet values override any model properties for these columns:
          if ('Taxonomy Classification' in rec) {
              rec['Taxonomy Classification'] = entry.row[colIdxFn('Taxonomy Classification')] || rec['Taxonomy Classification'] || '';
          }
          if ('Level' in rec) {
              rec['Level'] = entry.row[colIdxFn('Level')] || rec['Level'] || '';
          }

          // 5. Output row in final order (propKeys)
          frag += buildCsvLine(rec, propKeys) + '\n';
      });

      return frag;
  }

  /**
 * Process model-only elements (not matched in spreadsheet).
 * Uses buildProperties() to create the metadata/record object.
 *
 * @param {Object} matchedIds    - Hash of matched IDs from spreadsheet.
 * @param {Array} propKeys       - CSV column order/keys for output.
 * @returns {string} frag        - CSV fragment string.
 */
  function processModelOnly(matchedIds, propKeys) {
      log('Processing model-only elements...');
      let frag = '';
      let count = 0;
      const ctx = {
          getGrouping: getGrouping,
          getElementViews: getElementViews,
          relTypeIds: relTypeIds
      };

      toJsArray($('element').toArray())
          .filter(e => !matchedIds[e.id])
          .forEach((el, idx) => {
              count++;
              log(' [' + count + '] Model-only element ' + el.id);

              // (your domain logic here)
              const lvl = el.prop('Level') || '0';
              const mapEntry = config.levelMap[lvl] || config.levelMap['0'];
              const targetCol = mapEntry.col;

              const dynVals = collectPropValues(el, propKeys);

              // Core record from buildProperties utility
              let rec = buildProperties(
                  el,
                  config.modelProperties,
                  config.supplementProperties,
                  ctx
              );

              // For columns present in propKeys but not set, fill as ''
              propKeys.forEach(key => {
                  if (!(key in rec)) rec[key] = '';
              });

              // Place the name in the correct "name" column, clear others
              if ('ABB Name' in rec) rec['ABB Name'] = '';
              if ('Functional composition' in rec) rec['Functional composition'] = '';
              rec[targetCol] = el.name;

              // Override/add known base/flag/extra fields as required
              if ('Description' in rec)   rec['Description']   = el.documentation || '';
              if ('nameMatch' in rec)     rec['nameMatch']     = '0';
              if ('descMatch' in rec)     rec['descMatch']     = '0';
              if ('modelOnly' in rec)     rec['modelOnly']     = '1';
              if ('_id' in rec)           rec['_id']           = '';

              // Add any dynamic values
              Object.keys(dynVals).forEach(key => { rec[key] = dynVals[key]; });

              // Output row in final, correct order
              frag += buildCsvLine(rec, propKeys) + '\n';
          });

      return frag;
  }


  /** Main entry point */
  function main() {
    try {
      log('Starting Heatmap-Sync execution...');

      const excelPath = promptForFile(config.excelFilePromptTitle, config.excelFilters,  window.promptOpenFile);
      if (!excelPath) return;
      const csvPath   = promptForFile(config.csvFilePromptTitle, config.csvFilters,   window.promptSaveFile);
      if (!csvPath)   return;

      if (config.debug) debug('[DEBUG] Loading SheetJS from: ' + config.sheetjsPath);
      // const XLSX   = loadSheetJS(config.sheetjsPath);
      const wb     = XLSX.read(readFileBase64(excelPath), { type:'base64' });
      const sheet  = wb.Sheets[config.sheetName];
      if (!sheet) throw new Error('Sheet "' + config.sheetName + '" not found');
      const rows   = XLSX.utils.sheet_to_json(sheet, { header:1, raw:false });

      // Map headers
      const headersRow = rows[1].map(h => h.toString().trim());
      const colIdx = c => headersRow.indexOf(c);
      validateColumns(colIdx, config.requiredColumns);

      // Build full list of CSV columns
      // Start with explicit columns in your preferred order:
      let propKeys = ['uid']
        .concat(config.baseOutputCols)
        .concat(config.flagCols)
        .concat(config.extraCols);

      // Add any new modelProperties (if not already present)
      config.modelProperties.forEach(key => {
        if (!propKeys.includes(key)) propKeys.push(key);
      });

      // Add any new supplementProperties keys (if not already present)
      config.supplementProperties.forEach(s => {
        if (!propKeys.includes(s.key)) propKeys.push(s.key);
      });

      // // Build CSV content
      // let csv = '';
      // csv += processSpreadsheetRows(rows, colIdx, {}, propKeys);
      // csv += processModelOnly({}, propKeys);

      // Build CSV row objects (instead of immediate string concat)
      let allRows = [];

      // Instead of direct string build, collect records
      allRows = allRows.concat(processSpreadsheetRows(rows, colIdx, {}, propKeys, /*collectMode=*/true));
      allRows = allRows.concat(processModelOnly({}, propKeys, /*collectMode=*/true));

      // Assign UUIDs (fills 'uid' field in each row, using config.uuidCols for uniqueness)
      assignRowUUIDs(allRows, config.uuidCols, 'uid');

      // Now build the CSV string (header + rows)
      let csv = '';
      csv += buildHeader(propKeys) + '\n';
      allRows.forEach(rec => {
        csv += buildCsvLine(rec, propKeys) + '\n';
      });

      // Write out final CSV
      writeCsv(csv, csvPath);

      log('Heatmap-Sync execution completed.');
      window.alert('Export complete: ' + csvPath);
    }
    catch (err) {
      error('Error: ' + err);
      window.alert('Script failed: ' + err.message);
    }
  }
  log('Heatmap-Sync script started.');
  main();
})();
