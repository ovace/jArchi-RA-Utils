/*
 * Heatmap-Sync Enhanced (Modularized, Fully Documented, with Header Fallback,
 * Progress Reporting, Grouping Extraction, View-Membership, and Blank-Row Filtering)
 * Heatmap-Sync Enhanced (Modularized, Fully Documented, with View-Membership and Robust CSV Helpers)
 */

(function() {
  // Initialize console
  console.clear();
  console.show();

  // Load shared libraries  
  const libPath = __DIR__ + 'lib\\';
  console.log("libPath: " + libPath);
  const envPath = __DIR__+".env";
  console.log("envPath: " + envPath);
  // any of these now work
  load(libPath + 'loadEnv.ajs').loadEnv(envPath);
  const { log } = load(libPath + 'logger.ajs');  
  log.info("global log works");

  const utils  = require(libPath + 'common_utils.ajs');
  const { data2Records } = require(libPath + 'data_utils.ajs');
  const { loadAndPrepareSheet } = require(libPath +'excelUtils.ajs');
  const { getModelData,  mapModelDataToRecords, getModelBlankEntries } = require(libPath +'modelUtils.ajs');
  
  const XLSX   = require(libPath + 'xlsx.full.min.js');

  // ── Module-level caches for generateExtRef ──
    var _extRef_dictCache     = null;
    var _extRef_countMapCache = null;
    var _extRef_lastKey       = null;


  const { 
    assignRowUUIDs,
    buildCsvLine,   
    buildHeader,
    buildProperties,
    collectColumnValues,
    collectPropValues,
    conceptRelationshipMap,
    createSubfolderUnderParent,
    escapeFolderName,
    escapeString,
    exportToExcel,
    findFolderByName_selector,
    findFoldersByName_filter,
    findSubFolderByName,
    findSubfoldersUnderParent,
    findSubfoldersUnderParentObject,
    formatForCSV,
    getActiveModel,
    getElementViews,
    getImmediateChildFolders,
    getOrCreateSubfolder,
    getRootFolders,
    getRowValue,
    getSubfolders,
    loadSheetJS,
    mergeDynamicProps,
    normalize,
    normalizeFolderName,
    promptForFile,
    readCSV,
    readFileBase64,
    toJsArray,    
    unescapeString,
    validateColumns,
    writeCsv,
  } = utils;


// Configuration  

  /** @typedef {{
   *    sheetName: string,
   *    excelFilters: Array<Object>,
   *    csvFilters: Array<Object>,
   *    sheetjsPath: string,
   *    requiredColumns: string[],
   *    baseOutputCols: string[],
   *    flagCols: string[],
   *    extraCols: string[],
   *    relationshipTypes: string[],
   *    levelMap: Object<string,{col:string}>,
   *    debug: boolean
   * }} Config
   */
  const config = {
    debug: true,
    readWorkbook: true,
    getConceptDetails: true,
    getRelarionshipMap: true,    

    sheetjsPath:  __DIR__ + '/lib/xlsx.full.min.js',    
    
    excelFilters: [{ name: 'Excel Workbook', extensions: ['xlsm','xlsx'] }],
    sheetName: 'Function-HeatMap',

    csvFilters:   [{ name: 'CSV File',      extensions: ['csv'] }],
    
    requiredColumns: ['_id','ABB Name','Functional composition','Description','Pri Domain'],
    baseOutputCols:  ['_id','ABB Name','Functional composition', 'ext-Name', 'Description','Pri Domain'],
    flagCols:        ['Taxonomy Classification','Level','nameMatch','descMatch','modelOnly'],
    extraCols:       ['ID','Type','Grouped_under', 'Grouping_relationshipType','inView'],
    extModelHeadersMap : {
        extCol: 'ABB Name',
        refCol: "Taxonomy Classification",
        outCol: 'ext-Name'
        },
    extHeadersMap : {
        extCol: 'ABB Name',
        refCol: "Functional composition",
        outCol: 'ext-Name'
        },
    modelMap : {        
        conceptName:          'ABB Name', // which key in the output will hold the element’s name        
        conceptType:          'Type', // which key will hold the element’s Archi type (e.g. “BusinessActor”, “ApplicationComponent”)         
        conceptDocument:      'Description', // which key will hold the element’s description
        conceptID:            'ID', // which key will hold the element’s unique ID        
        conceptProperties: [
          'Level',
          'Taxonomy Classification',
          'Description',
          'Version',
          'Owner',
          'StandardSolutionExample',  
          'ExampleUse',
        ],  // a list of element properties (el.prop('<propKey>')) to include in the output        
        relationshipTypes: [
          'composition-relationship',
          'assignment-relationship',
          'realization-relationship',
          'aggregation-relationship',
          'association-relationship'
        ]  // for each relationship type name here, we’ll collect outgoing target IDs (joined by commas)        
       
      },
    extModelMap : {
        extCol: 'Taxonomy Classification',
        refCol: "ABB Name",
        outCol: 'ext-Name'
    },
    relationshipTypes: [
      'association-relationship',
      'aggregation-relationship',
      'composition-relationship'
    ],
    relTargetTypes : ['grouping','resource'],
    modelProperties: [
      'Level',
      'Taxonomy Classification',
      'Version',
      'Owner',
      'Name',
      'StandardSolutionExample',
      'ExampleUse',      
    ],
    uuidCols: [
      'Pri Domain',
      'ext-Name',
      'ABB Name'      
    ],
    /**
     * supplementProperties: List of computed or derived properties for export/metadata.
     * Each entry provides a key (column name) and a function taking (el, ctx).
     */
    supplementProperties : [
        {
            key: "ID",
            fn: function(el) { return el && el.id ? el.id : ""; }
        },
        {
            key: "Type",
            fn: function(el) { return el && el.type ? el.type : ""; }
        },
        // {
        //     key: "Grouped_under",
        //     fn: function(el, ctx) { return el ? ctx.getGrouping(el, ctx.relTypeIds, config.relTargetTypes) : ""; }
        // },        
        {
          key: "Grouped_under",
          fn: function(el, ctx) {
            if (!el) return "";
            const g = ctx.getGrouping(el, ctx.relTypeIds, ctx.relTargetTypes);
            return g.targetName || "";
          }
        },
        {
          key: "Grouping_target_id",
          fn: function(el, ctx) {
            if (!el) return "";
            const g = ctx.getGrouping(el, ctx.relTypeIds, ctx.relTargetTypes);
            return g.targetId || "";
          }
        },
        {
          key: "Grouping_relationshipType",
          fn: function(el, ctx) {
            if (!el) return "";
            const g = ctx.getGrouping(el, ctx.relTypeIds, ctx.relTargetTypes);
            return g.relType || "";
          }
        },
        {
          key: "Grouping_relationshipId",
          fn: function(el, ctx) {
            if (!el) return "";
            const g = ctx.getGrouping(el, ctx.relTypeIds, ctx.relTargetTypes);
            return g.relId || "";
          }
        },
        {
            key: "inView",
            fn: function(el, ctx) { return el ? ctx.getElementViews(el) : "Orphan"; }
        }        
      ],
    levelMap: {
      '0': { col: 'ABB Name' },
      '1': { col: 'ABB Name' },
      '2': { col: 'Functional composition' }
    },    
    // CSV Options
    csvOptions: {
      delimiter: ',',
      newline: '\n',
      escapeFormulae: true  
    }
    
  };

  // const relTypeIds = config.relationshipTypes;
  
/**
 * Determine a “grouping” relationship for an element.
 * Scans configured relTypes and relTargetTypes and returns
 * the first matching target + relationship details.
 *
 * @param {IElement}  element         Archi element proxy
 * @param {string[]}  relTypes        Relationship type names to inspect
 * @param {string[]}  relTargetTypes  Element type names that qualify as grouping targets
 * @returns {{
 *            targetName: string,
 *            targetId:   string,
 *            relType:    string,
 *            relId:      string
 *          }}
 */
function getGrouping(element, relTypes, relTargetTypes) {
  // Validate
  if (!element || !element.id) {
    throw new TypeError('getGrouping(): element must be a valid Archi element');
  }
  if (!Array.isArray(relTypes) || !Array.isArray(relTargetTypes)) {
    throw new TypeError('getGrouping(): relTypes and relTargetTypes must be arrays');
  }

  log.debug(`getGrouping() for element=${element.id}/${element.name}`);
  log.debug(`Scanning relTypes=${JSON.stringify(relTypes)} for targets=${JSON.stringify(relTargetTypes)}`);

  // Default empty result
  const empty = { targetName: '', targetId: '', relType: '', relId: '' };

  // Lower-case comparisons
  const targetTypeSet = new Set(relTargetTypes.map(t => t.toLowerCase()));

  for (let typeName of relTypes) {
    const typeLower = typeName.toLowerCase();
    // All relationships of this type
    const allRels = $('relationship')
      .filter(r => r.type && r.type.toLowerCase() === typeLower)
      .toArray();
    log.debug(`Found ${allRels.length} relationships of type="${typeName}"`);

    // Those involving our element
    const relevant = allRels.filter(r =>
      (r.source && r.source.id === element.id) ||
      (r.target && r.target.id === element.id)
    );
    log.debug(`  ${relevant.length} are connected to element`);

    if (relevant.length) {
      // First, look for a grouping‐target element
      for (let rel of relevant) {
        const other = (rel.source.id === element.id ? rel.target : rel.source);
        const otherType = other.type && other.type.toLowerCase();
        if (targetTypeSet.has(otherType)) {
          log.debug(`  Matched target element ${other.name} (type=${other.type}, id=${other.id})`);
          return {
            targetName: other.name,
            targetId:   other.id,
            relType:    rel.type,
            relId:      rel.id
          };
        }
      }
      // No grouping‐target, but we did see relationships → return the first rel
      const rel = relevant[0];
      const other = (rel.source.id === element.id ? rel.target : rel.source);
      log.debug(`  No grouping-target; returning relType="${rel.type}", relId="${rel.id}"`);
      return {
        targetName: other.name,
        targetId:   other.id,
        relType:    rel.type,
        relId:      rel.id
      };
    }
  }

  // Nothing found
  log.debug('getGrouping(): no matching relationships or targets found');
  return empty;
}

  /**
   * Generate an “external ↔ reference” code for each row in a data array,
   * mirroring VBA’s GenerateExtRef but in-memory and batched.
   *
   * @param {Object[]} data
   *    Array of row-objects keyed by column header.
   * @param {{extCol:string, refCol:string, outCol:string}} headersMap
   *    Map of your 3 columns from config.
   * 
   * @returns {Object[]}
   *    Same data array, with each row[outCol] populated.
   */
  function generateExtRef(data, headersMap) {
    const { extCol, refCol, outCol } = headersMap;
    const cacheKey = extCol + '|' + refCol;

    // Module‐level caches on outer scope
    if (!_extRef_dictCache || cacheKey !== _extRef_lastKey) {
      log.debug(`Rebuilding extRef cache for ${cacheKey}`);
      _extRef_dictCache    = {};
      _extRef_countMapCache = {};

      log.debug("data length: " + data.length);

      // 1) Initial code assignment
      data.forEach(row => {
        const extKey = headersMap.extCol.trim();
        let extVal = (row[extCol]||'').toString().trim();
        log.debug(`Column: ${extCol} Row: ${row[extCol]} extVal=${extVal} cache val=${_extRef_dictCache[extVal]}`);

        if (extVal && !_extRef_dictCache[extVal]) {
          const parts = extVal.split(/\s+/);
          let code = parts.length === 1
            ? parts[0].substring(0,3)
            : parts.map(p => p.charAt(0)).join('');
          code = utils.toJsArray([code]).join('').replace(/[^A-Za-z0-9]/g,'');
          _extRef_dictCache[extVal] = code;
          log.debug(`    Map: ${extVal} → ${code}`);
        }
      });

      // 2) Count duplicates
      Object.values(_extRef_dictCache)
        .forEach(code => _extRef_countMapCache[code] = (_extRef_countMapCache[code]||0) + 1);

      // 3) Upgrade duplicates to 2-chars/word
      log.debug('    Checking duplicates…');
      Object.keys(_extRef_dictCache).forEach(key => {
        const code = _extRef_dictCache[key];
        log.debug('code: ' + code + ' Cache value: ' + _extRef_countMapCache[code]);
        if (_extRef_countMapCache[code] > 1) {
          const parts = key.split(/\s+/);
          let newCode = parts.map(p => p.length>1 ? p.substring(0,2) : p.charAt(0)).join('');
          newCode = newCode.replace(/[^A-Za-z0-9]/g,'');
          _extRef_dictCache[key] = newCode;
          log.debug(`      Upgraded: ${key} → ${newCode}`);
        }
      });

      _extRef_lastKey = cacheKey;
    }
    else 
      log.debug(`✅ Using cached extRef map for ${cacheKey}`);
    

    // 4) Compute & assign result per row
    data.forEach((row, idx) => {
      const extVal = (row[extCol]||'').toString().trim();
      const refVal = (row[refCol]||'').toString().trim();
      
      log.debug(`Row ${idx} extVal='${extVal}' refVal='${refVal}'`);
      

      const code = _extRef_dictCache[extVal] || '';
      let result = '';
      if (extVal && extVal.toLowerCase() === refVal.toLowerCase()) {
        result = extVal;
      }
      else if (!code && !refVal) {
        result = '';
      }
      else if (!refVal) {
        result = code;
      }
      else if (!code) {
        result = refVal;
      }
      else if (code.replace(/\s+/g,'').toLowerCase() === refVal.replace(/\s+/g,'').toLowerCase()) {
        result = refVal;
      }
      else {
        result = `${code}-${refVal}`;
      }

      log.debug(`→ result: ${result}`);
      row[outCol] = result;
    });

    return data;
  }

/**
 * Process sheet rows into an array of record objects.
 * Uses buildProperties() for model element data injection.
 *
 * @param {Array|Object}  data         Raw sheet data:
 *                                     - array of arrays (sheet_to_json header:1)
 *                                     - array of objects (sheet_to_json header:keys)
 *                                     - or a single object.
 * @param {Function}      colIdxFn     Maps a column name to either an index (for arrays)
 *                                     or a property key (for objects).
 * @param {Object}        matchedIds   Accumulator to mark matched element IDs.
 * @param {string[]}      propKeys     List of all property keys to include in each output record.
 * @returns {Object[]}    Array of flattened, merged output records.
 *
 * @throws {TypeError} if input types are invalid
 */
function processSpreadsheetRows(data, colIdxFn, matchedIds, propKeys) {
  // 1. Validate inputs
  if (typeof colIdxFn !== 'function') {
    throw new TypeError('colIdxFn must be a function');
  }
  if (!Array.isArray(propKeys)) {
    throw new TypeError('propKeys must be an array of strings');
  }

  log.debug('processSpreadsheetRows(): Starting');
  log.debug('propKeys:', JSON.stringify(propKeys));
  log.debug('matchedIds (initial):', JSON.stringify(matchedIds));

  // 2. Normalize raw input using shared utility
  const normalizedData = data2Records(data, { dropRows: 2, preview: 5 });
  log.info(`Processing ${normalizedData.length} normalized spreadsheet rows...`);

  // 3. Shared context for buildProperties
  const ctx = {
    getGrouping,
    getElementViews,
    relTypeIds: config.relationshipTypes,                     // your existing rel-type list
    relTargetTypes: config.relTargetTypes  // NEW: list of element types to match
  };

  const output = [];

  normalizedData.forEach(({ row, sheetRow }, idx) => {
    log.debug(`[${idx + 1}/${normalizedData.length}] sheetRow=${sheetRow}`);

    // 4.1 Lookup Functional composition → match element
    const fcRaw  = (row['Functional composition'] || '').toString();
    const fcNorm = normalize(fcRaw);
    const el     = $('element').filter(e => normalize(e.name) === fcNorm).first();

    // 4.2 Spreadsheet properties
    const spreadsheetProps = {};
    propKeys.forEach(k => spreadsheetProps[k] = '');

    config.baseOutputCols.forEach(col => {
      const val = row[col];
      spreadsheetProps[col] = (val !== undefined && val !== null) ? val.toString() : '';
    });

    spreadsheetProps.nameMatch  = '0';
    spreadsheetProps.descMatch  = '0';
    spreadsheetProps.modelOnly  = '0';

    // 4.3 Model match
    let modelProps = {};
    if (el) {
      spreadsheetProps.nameMatch = '1';

      const docNorm  = normalize(el.documentation || '');
      const descNorm = normalize((row['Description'] || '').toString());
      if (docNorm === descNorm) {
        spreadsheetProps.descMatch = '1';
      }

      matchedIds[el.id] = true;

      modelProps = buildProperties(
        el,
        config.modelProperties,
        config.supplementProperties,
        ctx
      );
    } else {
      config.supplementProperties.forEach(supp => {
        if (supp.key === 'inView') modelProps[supp.key] = 'Orphan';
      });
    }

    // 4.4 Merge hierarchy
    const dynVals = {}; // optional dynamic props

    const rec = {};
    propKeys.forEach(k => rec[k] = '');
    mergeDynamicProps(rec, spreadsheetProps, propKeys);
    mergeDynamicProps(rec, modelProps,       propKeys);
    mergeDynamicProps(rec, dynVals,          propKeys, true);

    // 4.5 Forced sheet overrides
    ['Taxonomy Classification', 'Level'].forEach(col => {
      if (col in rec) {
        const val = row[col];
        rec[col] = (val !== undefined && val !== null) ? val.toString() : rec[col];
      }
    });

    output.push(rec);
  });

  // 5. Log output preview
  const preview = output.slice(0, 5);
  log.debug(
    'processSpreadsheetRows(): Output preview:\n' +
    preview.map((rec, i) =>
      `#${i} ${JSON.stringify(rec, null, 2)}`
    ).join('\n\n')
  );

  return output;
}

/**
 * Process model-only elements (not matched in spreadsheet).
 * Returns array of records, one per unmatched model element.
 *
 * @param {Object}    matchedIds  Map of element IDs matched to spreadsheet rows
 * @param {string[]}  propKeys    All property keys expected in output records
 * @returns {Object[]}            Array of merged record objects
 */
function processModelOnly(matchedIds, propKeys) {
  // 1. Validate inputs
  if (!matchedIds || typeof matchedIds !== 'object') {
    throw new TypeError('processModelOnly(): matchedIds must be an object');
  }
  if (!Array.isArray(propKeys)) {
    throw new TypeError('processModelOnly(): propKeys must be an array of strings');
  }

  log.info('processModelOnly(): starting extraction of unmatched model elements');
  log.debug('matchedIds count:', Object.keys(matchedIds).length);
  log.debug('propKeys:', JSON.stringify(propKeys));

  // 2. Extract all elements (with blank rows)
  const allEntries = getModelBlankEntries(propKeys);

  // 3. Filter out those already matched
  const entries = allEntries.filter(({ el }) => !matchedIds[el.id]);
  log.info(`processModelOnly(): ${entries.length} elements remain after filtering`);

  // Nested helper to place el.name by level
  function applyNameByLevel(el, rec) {
    // Determine level (string)
    const lvl = (el.prop('Level') || '0').toString();
    // Look up in config.levelMap, default to '0'
    const mapEntry = config.levelMap[lvl] || config.levelMap['0'];
    const targetCol = mapEntry.col;

    // Clear both potential name fields
    ['ABB Name', 'Functional composition'].forEach(col => {
      if (propKeys.includes(col)) rec[col] = '';
    });

    // Assign el.name to the chosen column
    if (propKeys.includes(targetCol)) {
      rec[targetCol] = el.name;
    } else {
      log.warn(`applyNameByLevel: target column "${targetCol}" not in propKeys`);
    }
  }

  // 4. Prepare merge context
  // 4.1. Shared context for buildProperties
  const ctx = {
    getGrouping,
    getElementViews,
    relTypeIds: config.relationshipTypes,                     // your existing rel-type list
    relTargetTypes: config.relTargetTypes  // NEW: list of element types to match
  };
  const output = [];

  // 5. Process each unmatched entry
  entries.forEach(({ el, row, sheetRow }, idx) => {
    log.debug(`Entry ${idx + 1}/${entries.length} (sheetRow=${sheetRow})`);

    // 5.1 Mark spreadsheet flags
    row.modelOnly = '1';
    row.nameMatch = '0';
    row.descMatch = '0';

    // 5.2 Pull model properties
    const modelProps = buildProperties(
      el,
      config.modelProperties,
      config.supplementProperties,
      ctx
    );

    // 5.3 (Optional) dynamic props
    const dynVals = collectPropValues(el, propKeys);

    // 5.4 Merge precedence: row < model < dynamic
    const rec = {};
    propKeys.forEach(k => { rec[k] = ''; });
    mergeDynamicProps(rec, row,        propKeys);
    mergeDynamicProps(rec, modelProps, propKeys);
    mergeDynamicProps(rec, dynVals,    propKeys, true);

    // 5.5 Place element name by level via nested helper
    applyNameByLevel(el, rec);

    // 5.6 Ensure Description
    if (propKeys.includes('Description')) {
      rec['Description'] = el.documentation || '';
    }

    output.push(rec);
  });

  // 6. Output preview of first five
  log.debug(
    'processModelOnly(): Output preview (first 5):\n' +
    output.slice(0, 5)
      .map((r, i) => `#${i + 1} ${JSON.stringify(r, null, 2)}`)
      .join('\n\n')
  );

  log.info('processModelOnly(): complete');
  return output;
}

/** Main entry point */
/**
 * Main entry point for Heatmap-Sync.
 * Loads and processes input Excel, writes CSV output, and (optionally) exports model relationship map to Excel.
 */
function main() {
    try {        
        var model = getActiveModel();
        if (!model) {
            log.warn('No active model. Aborting.');
            return;
        }
       
        log.debug('Diagnostic information...');

        log.debug('engineName :' +$.process.engine);
        log.debug('platform: ' + $.process.platform );
        log.debug('archi Name: ' + $.process.archiname );
        log.debug(' archi version : ' + $.process.release.archiVersion);
        log.debug(' jArchi name: ' + $.process.release.jArchiName);
        log.debug(' version : ' + $.process.release.jArchiVersion);

        log.debug('Active model: ' + model.name);
        log.debug('Element count: ' + $('element').size());
        log.debug('Relationship count: ' + $('relationship').size());
        log.debug('Property count: ' + $('property').size());          

        if (config.getConceptDetails) {
            log.info('Starting Heatmap-Sync execution...');

              log.info('Starting read workbook '+ '...')
              // 1. Prompt for input and output files
              const excelPath = promptForFile('Select source Heatmap Excel Workbook', config.excelFilters, window.promptOpenFile);
              if (!excelPath) return;
              const csvPath = promptForFile('Heatmap output CSV File', config.csvFilters, window.promptSaveFile);
              if (!csvPath) return;
              log.debug('reading Excel from: ' + excelPath);
              // 2. Load Excel, read worksheet
              log.debug('Loading SheetJS from: ' + config.sheetjsPath);
              const wb = XLSX.read(readFileBase64(excelPath), { type: 'base64' });
              log.debug(`getting Excel Workbook: ${wb} with ${wb.SheetNames.length}  sheets`);
              const sheet = wb.Sheets[config.sheetName];
              log.debug(`Reading from Excel sheet: ${sheet}`);
              if (!sheet) throw new Error('Sheet "' + config.sheetName + '" not found');
              
              // 2.1 Grab & trim the raw header row (Excel row 1)
              // 1) pull every row as an array...
              const sheetRows = XLSX.utils.sheet_to_json(sheet, { header: 1, raw: false });

              // 2) now grab the *second* row (index 1) as your real header row
              const rawHeaders = sheetRows[1].map(h => h.toString().trim());
              log.debug('Trimmed headers (from row 2):', rawHeaders);              

              // 2.2 Now read the rest of the rows into objects keyed by those headers
              let data = XLSX.utils.sheet_to_json(sheet, {
                header: rawHeaders,
                range:    2,     // skip header row
                defval:   '',    // empty strings for blank cells
                raw:      false
              });              
              log.debug(`read rows data: ${data.length} from sheet: ${config.sheetName} in workbook: ${excelPath}`);
              
              // 3. Generate ext Name  extensions ext-Name
              data = generateExtRef(data, config.extHeadersMap)
              log.debug(`ext data: ${data.length} headers: ${JSON.stringify(config.extHeadersMap)}` )
              
              // 3. Validate headers (object-based `data`)
              const headersRow = Object
                .keys(data[0])
                .map(h => h.toString().trim());
              log.debug('headers with ext: ' + headersRow.join(', '));

              // (optional) make sure your extHeadersMap values are present
              const missing = Object
                .values(config.extHeadersMap)
                .filter(h => !headersRow.includes(h));
              if (missing.length) {
                throw new Error(
                  `Missing expected headers in sheet: ${missing.join(', ')}`
                );
              }
             
              let colIdx = c => headersRow.indexOf(c);
              validateColumns(colIdx, config.requiredColumns);
              const heatmapdata = data;


              // const heatmapdata = loadAndPrepareSheet(excelPath, {
              //   sheetName:       'Data',
              //   extHeadersMap:   config.extHeadersMap,
              //   requiredColumns: config.requiredColumns
              // });
                        
            
              // 4. Prepare CSV output columns
              let propKeys = ['uid']
                  .concat(config.baseOutputCols)
                  .concat(config.flagCols)
                  .concat(config.extraCols);

              config.modelProperties.forEach(key => {
                  if (!propKeys.includes(key)) propKeys.push(key);
              });

              config.supplementProperties.forEach(s => {
                  if (!propKeys.includes(s.key)) propKeys.push(s.key);
              });

              // 5. Process spreadsheet and model data
              let matchedIds = {};
              let allRows = [];
              allRows = allRows.concat(processSpreadsheetRows(heatmapdata, colIdx, matchedIds, propKeys));
              allRows = allRows.concat(processModelOnly(matchedIds, propKeys));
          

            assignRowUUIDs(allRows, config.uuidCols, 'uid');

            // 6. Write output CSV
            log.info('Exporting ' + allRows.length + ' rows...');
            log.info(`propKeys: ${propKeys}`);
            let csv = buildHeader(propKeys) + '\n';
            allRows.forEach(rec => {
                csv += buildCsvLine(rec, propKeys) + '\n';
            });
            writeCsv(csv, csvPath);

            window.alert('Export complete: ' + csvPath);
        }

        if (config.getRelarionshipMap) {

          // 7. export concept relationship map to Excel
          if (window.confirm('Export a model relationship map to Excel?')) {
              log.info('[main] User requested relationship map Excel export.');
              // Compose relationship map from all model elements
              const elements = toJsArray($('element').toArray());
              const mapRows = conceptRelationshipMap(elements, "out");
              exportToExcel(mapRows, 'Relationships', 'Save Relationship Map Excel');
          } else {
              log.info('[main] Relationship map export skipped by user.');
          }
        }

        log.info('Heatmap-Sync execution complete.');
    }
    catch (err) {
        log.error('Error: ' + err);
        window.alert('Script failed: ' + (err && err.message ? err.message : err));
    }
}


    log.info('Heatmap-Sync script started.');    
    main();
})();
