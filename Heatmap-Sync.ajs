/*
 * Heatmap-Sync Enhanced (Modularized, Fully Documented, with Header Fallback,
 * Progress Reporting, Grouping Extraction, View-Membership, and Blank-Row Filtering)
 * Heatmap-Sync Enhanced (Modularized, Fully Documented, with View-Membership and Robust CSV Helpers)
 */

(function() {
  // Initialize console
  console.clear();
  console.show();

  // Load shared libraries
  const libPath = __DIR__ + 'lib\\';
  const utils  = require(libPath + 'common_utils.ajs');
  const logger = require(libPath + 'logger.ajs');
  const XLSX   = require(libPath + 'xlsx.full.min.js');

  const { 
    assignRowUUIDs,
    buildCsvLine,   
    buildHeader,
    buildProperties,
    collectColumnValues,
    collectPropValues,
    conceptRelationshipMap,
    createSubfolderUnderParent,
    escapeFolderName,
    escapeString,
    exportToExcel,
    findFolderByName_selector,
    findFoldersByName_filter,
    findSubFolderByName,
    findSubfoldersUnderParent,
    findSubfoldersUnderParentObject,
    formatForCSV,
    getActiveModel,
    getElementViews,
    getImmediateChildFolders,
    getOrCreateSubfolder,
    getRootFolders,
    getRowValue,
    getSubfolders,
    loadSheetJS,
    mergeDynamicProps,
    normalize,
    normalizeFolderName,
    promptForFile,
    readCSV,
    readFileBase64,
    toJsArray,    
    unescapeString,
    validateColumns,
    writeCsv,
  } = utils;

  const { log, 
          debug, 
          warn, 
          error 
        } = logger;

  // Configuration  

  /** @typedef {{
   *    sheetName: string,
   *    excelFilters: Array<Object>,
   *    csvFilters: Array<Object>,
   *    sheetjsPath: string,
   *    requiredColumns: string[],
   *    baseOutputCols: string[],
   *    flagCols: string[],
   *    extraCols: string[],
   *    relationshipTypes: string[],
   *    levelMap: Object<string,{col:string}>,
   *    debug: boolean
   * }} Config
   */
  const config = {
    debug: false,
    getConceptDetails: true,
    getRelarionshipMap: true,    

    sheetjsPath:  __DIR__ + '/lib/xlsx.full.min.js',    
    
    excelFilters: [{ name: 'Excel Workbook', extensions: ['xlsm','xlsx'] }],
    sheetName: 'Function-HeatMap-Final',

    csvFilters:   [{ name: 'CSV File',      extensions: ['csv'] }],
    
    requiredColumns: ['_id','ABB Name','Functional composition','Description','Pri Domain'],
    baseOutputCols:  ['_id','ABB Name','Functional composition','Description','Pri Domain'],
    flagCols:        ['Taxonomy Classification','Level','nameMatch','descMatch','modelOnly'],
    extraCols:       ['ID','Type','Grouped_under','inView'],
    relationshipTypes: [
      'association-relationship',
      'aggregation-relationship',
      'composition-relationship'
    ],
    modelProperties: [
      'Level',
      'Taxonomy Classification',
      'Version',
      'Owner',
      'Name',
      'StandardSolutionExample',
      'ExampleUse',      
    ],
    uuidCols: [
      'Pri Domain',
      'Functional composition',
      'ABB Name'      
    ],
    /**
     * supplementProperties: List of computed or derived properties for export/metadata.
     * Each entry provides a key (column name) and a function taking (el, ctx).
     */
    supplementProperties : [
        {
            key: "ID",
            fn: function(el) { return el && el.id ? el.id : ""; }
        },
        {
            key: "Type",
            fn: function(el) { return el && el.type ? el.type : ""; }
        },
        {
            key: "Grouped_under",
            fn: function(el, ctx) { return el ? ctx.getGrouping(el, ctx.relTypeIds) : ""; }
        },
        {
            key: "inView",
            fn: function(el, ctx) { return el ? ctx.getElementViews(el) : "Orphan"; }
        }
        // Add further computed fields here as needed
    ],
    levelMap: {
      '0': { col: 'ABB Name' },
      '1': { col: 'ABB Name' },
      '2': { col: 'Functional composition' }
    },    
    // CSV Options
    delimiter: ',',
    newline: '\n',
    escapeFormulae: true  
  };

  const relTypeIds = config.relationshipTypes;
  
  /**
   * Determine grouping for an element via configured relationship types.
   * @param {Object} element – Archi element proxy
   * @param {string[]} relTypes
   * @returns {string} grouping name, relationship type, or ''
   */
  function getGrouping(element, relTypes) {
    if (config.debug) debug('[DEBUG] getGrouping() for ' + element.id + '/' + element.name);
    for (let type of relTypes) {
      const ofType   = $('relationship').filter(r => r.type.toLowerCase() === type).toArray();
      const relevant = ofType.filter(r => r.source.id === element.id || r.target.id === element.id);
      if (config.debug) debug('[DEBUG] - type=' + type + ', total=' + ofType.length + ', relevant=' + relevant.length);
      if (relevant.length) {
        for (let r of relevant) {
          const other = (r.source.id === element.id ? r.target : r.source);
          if (other.type.toLowerCase() === 'grouping') {
            if (config.debug) debug('[DEBUG] - grouping found: ' + other.name);
            return other.name;
          }
        }
        if (config.debug) debug('[DEBUG] - no grouping element; return type ' + type);
        return type;
      }
    }
    return '';
  }

/**
 * Process sheet rows into an array of record objects.
 * Uses buildProperties() for model element data injection.
 */
function processSpreadsheetRows(rows, colIdxFn, matchedIds, propKeys) {
    const dataRows = rows.slice(2).map((r, i) => ({ row: r, sheetRow: i + 2 }));
    log('Processing ' + dataRows.length + ' spreadsheet rows...');

    const ctx = {
        getGrouping: getGrouping,
        getElementViews: getElementViews,
        relTypeIds: relTypeIds
    };

    let output = [];
    dataRows.forEach((entry, idx) => {
        debug(' [' + (idx + 1) + '/' + dataRows.length + '] Sheet row ' + entry.sheetRow);

        const fc = normalize(entry.row[colIdxFn('Functional composition')] || '');
        const el = $('element').filter(e => normalize(e.name) === fc).first();

        // 1. Spreadsheet props
        let spreadsheetProps = {};
        propKeys.forEach(col => { spreadsheetProps[col] = ''; });
        config.baseOutputCols.forEach(col => {
            spreadsheetProps[col] = entry.row[colIdxFn(col)] || '';
        });
        spreadsheetProps['nameMatch'] = '0';
        spreadsheetProps['descMatch'] = '0';
        spreadsheetProps['modelOnly'] = '0';

        // 2. Model props
        let modelProps = {};
        if (el) {
            spreadsheetProps['nameMatch'] = '1';
            const docNorm = normalize(el.documentation || '');
            const descNorm = normalize(entry.row[colIdxFn('Description')] || '');
            if (docNorm === descNorm) spreadsheetProps['descMatch'] = '1';
            matchedIds[el.id] = true;
            modelProps = buildProperties(
                el,
                config.modelProperties,
                config.supplementProperties,
                ctx
            );
        } else {
            config.supplementProperties.forEach(supp => {
                if (supp.key === 'inView') modelProps[supp.key] = 'Orphan';
            });
        }

        // 3. Dynamic values (if you use them; optional)
        let dynVals = {};
        // dynVals = collectPropValues(el, propKeys); // if you use this

        // 4. Chain merges (spreadsheet < model < dynVals)
        let rec = {};
        propKeys.forEach(key => { rec[key] = ''; });
        mergeDynamicProps(rec, spreadsheetProps, propKeys);        // Lowest priority
        mergeDynamicProps(rec, modelProps, propKeys);              // Only if not already present
        mergeDynamicProps(rec, dynVals, propKeys, true);           // dynVals always wins if not empty

        // 5. Guarantee spreadsheet override for these (optional, as before)
        if ('Taxonomy Classification' in rec) {
            rec['Taxonomy Classification'] = entry.row[colIdxFn('Taxonomy Classification')] || rec['Taxonomy Classification'] || '';
        }
        if ('Level' in rec) {
            rec['Level'] = entry.row[colIdxFn('Level')] || rec['Level'] || '';
        }

        output.push(rec);
    });

    return output;
}

/**
 * Process model-only elements (not matched in spreadsheet).
 * Returns array of records, one per unmatched model element.
 */
function processModelOnly(matchedIds, propKeys) {
    log('Processing model-only elements...');
    let output = [];
    let count = 0;
    const ctx = {
        getGrouping: getGrouping,
        getElementViews: getElementViews,
        relTypeIds: relTypeIds
    };

    toJsArray($('element').toArray())
        .filter(e => !matchedIds[e.id])
        .forEach((el, idx) => {
            count++;
            debug(' [' + count + '] Model-only element ' + el.id);

            // 1. Spreadsheet props: modelOnly, nameMatch, etc.
            let spreadsheetProps = {};
            propKeys.forEach(key => { spreadsheetProps[key] = ''; });
            spreadsheetProps['modelOnly'] = '1';
            spreadsheetProps['nameMatch'] = '0';
            spreadsheetProps['descMatch'] = '0';

            // 2. Model props (from buildProperties)
            let modelProps = buildProperties(
                el,
                config.modelProperties,
                config.supplementProperties,
                ctx
            );

            // 3. Dynamic values (if you use them; optional)
            let dynVals = collectPropValues(el, propKeys);

            // 4. Chain merges (spreadsheet < model < dynVals)
            let rec = {};
            propKeys.forEach(key => { rec[key] = ''; });
            mergeDynamicProps(rec, spreadsheetProps, propKeys);
            mergeDynamicProps(rec, modelProps, propKeys);
            mergeDynamicProps(rec, dynVals, propKeys, true);

            // Place the name in the correct column, clear others
            const lvl = el.prop('Level') || '0';
            const mapEntry = config.levelMap[lvl] || config.levelMap['0'];
            const targetCol = mapEntry.col;
            if ('ABB Name' in rec) rec['ABB Name'] = '';
            if ('Functional composition' in rec) rec['Functional composition'] = '';
            rec[targetCol] = el.name;
            if ('Description' in rec)   rec['Description']   = el.documentation || '';

            output.push(rec);
        });

    return output;
}

/** Main entry point */
/**
 * Main entry point for Heatmap-Sync.
 * Loads and processes input Excel, writes CSV output, and (optionally) exports model relationship map to Excel.
 */
function main() {
    try {
        
        var model = getActiveModel();
        if (!model) {
            warn('No active model. Aborting.');
            return;
        }

        if (config.debug) {
            debug('Diagnostic information...');

            debug('engineName :' +$.process.engine);
            debug('platform: ' + $.process.platform );
            debug('archi Name: ' + $.process.archiname );
            debug(' archi version : ' + $.process.release.archiVersion);
            debug(' jArchi name: ' + $.process.release.jArchiName);
            debug(' version : ' + $.process.release.jArchiVersion);

            debug('Active model: ' + model.name);
            debug('Element count: ' + $('element').size());
            debug('Relationship count: ' + $('relationship').size());
            debug('Property count: ' + $('property').size());

            // $('element').forEach(function(e) {
            //     debug('---------------------------------------------');
            //     debug('Element: ' + e.name + ' | type: ' + e.type + ' | id: ' + e.id);

            //     // Outgoing relationships
            //     var outRels = e.outRels();
            //     debug('Number of outRels: ' + outRels.length);
            //     outRels.forEach(function(rel) {
            //         var target = rel.target;
            //         debug('  Outgoing rel type: ' + rel.type +
            //             ' → target element: ' +
            //             (target ? (target.name + ' (' + target.type + ')') : '[no target]'));
            //     });

            //     // Incoming relationships
            //     var inRels = e.inRels();
            //     debug('Number of inRels: ' + inRels.length);
            //     inRels.forEach(function(rel) {
            //         var source = rel.source;
            //         debug('  Incoming rel type: ' + rel.type +
            //             ' ← source element: ' +
            //             (source ? (source.name + ' (' + source.type + ')') : '[no source]'));
            //     });
            // });
            $('element').each(function(e) {
                var outCount = 0;
                $('relationship').each(function(rel) {
                    if (rel.source && rel.source.id === e.id) {
                        outCount++;
                        // Gather info for source, relationship, target
                        var sourceName = e.name || '';
                        var sourceType = e.type || '';
                        var sourceId   = e.id || '';
                        var relType    = rel.type || '';
                        var relId      = rel.id || '';
                        var targetName = rel.target ? (rel.target.name || '') : '';
                        var targetType = rel.target ? (rel.target.type || '') : '';
                        var targetId   = rel.target ? (rel.target.id   || '') : '';

                        debug(
                            'Source Name: ' + sourceName +
                            ' | Source Type: ' + sourceType +
                            ' | Source ID: ' + sourceId +
                            ' | Relationship Type: ' + relType +
                            ' | Relationship ID: ' + relId +
                            ' | Target Name: ' + targetName +
                            ' | Target Type: ' + targetType +
                            ' | Target ID: ' + targetId
                        );
                    }
                });
                debug('Element: ' + e.name + ' | Outgoing relationships: ' + outCount);
            });



        } // end debug


        // 0. Validate config
        // validateConfig();

        if (config.getConceptDetails) {
            log('Starting Heatmap-Sync execution...');

            
            // 1. Prompt for input and output files
            const excelPath = promptForFile('Select source Heatmap Excel Workbook', config.excelFilters, window.promptOpenFile);
            if (!excelPath) return;
            const csvPath = promptForFile('Heatmap output CSV File', config.csvFilters, window.promptSaveFile);
            if (!csvPath) return;

            // 2. Load Excel, read worksheet
            if (config.debug) debug('[DEBUG] Loading SheetJS from: ' + config.sheetjsPath);
            const wb = XLSX.read(readFileBase64(excelPath), { type: 'base64' });
            const sheet = wb.Sheets[config.sheetName];
            if (!sheet) throw new Error('Sheet "' + config.sheetName + '" not found');
            const rows = XLSX.utils.sheet_to_json(sheet, { header: 1, raw: false });

            // 3. Validate headers
            const headersRow = rows[1].map(h => h.toString().trim());
            const colIdx = c => headersRow.indexOf(c);
            validateColumns(colIdx, config.requiredColumns);

            // 4. Prepare CSV output columns
            let propKeys = ['uid']
                .concat(config.baseOutputCols)
                .concat(config.flagCols)
                .concat(config.extraCols);

            config.modelProperties.forEach(key => {
                if (!propKeys.includes(key)) propKeys.push(key);
            });

            config.supplementProperties.forEach(s => {
                if (!propKeys.includes(s.key)) propKeys.push(s.key);
            });

            // 5. Process spreadsheet and model data
            let matchedIds = {};
            let allRows = [];
            allRows = allRows.concat(processSpreadsheetRows(rows, colIdx, matchedIds, propKeys));
            allRows = allRows.concat(processModelOnly(matchedIds, propKeys));

            assignRowUUIDs(allRows, config.uuidCols, 'uid');

            // 6. Write output CSV
            log('Exporting ' + allRows.length + ' rows...');
            let csv = buildHeader(propKeys) + '\n';
            allRows.forEach(rec => {
                csv += buildCsvLine(rec, propKeys) + '\n';
            });
            writeCsv(csv, csvPath);

            window.alert('Export complete: ' + csvPath);
        }

        if (config.getRelarionshipMap) {

          // 7. export concept relationship map to Excel
          if (window.confirm('Export a model relationship map to Excel?')) {
              log('[main] User requested relationship map Excel export.');
              // Compose relationship map from all model elements
              const elements = toJsArray($('element').toArray());
              const mapRows = conceptRelationshipMap(elements, "out");
              exportToExcel(mapRows, 'Relationships', 'Save Relationship Map Excel');
          } else {
              log('[main] Relationship map export skipped by user.');
          }
        }

        log('Heatmap-Sync execution complete.');
    }
    catch (err) {
        error('Error: ' + err);
        window.alert('Script failed: ' + (err && err.message ? err.message : err));
    }
}


  log('Heatmap-Sync script started.');
  main();
})();
